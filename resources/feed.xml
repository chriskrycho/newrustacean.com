<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" version="2.0">
    <channel>
        <title>New Rustacean</title>
        <link>http://newrustacean.com</link>
        <description>A podcast about learning the Rust programming language—from scratch!</description>
        <generator>Feeder 3 3.3.6(2864); Mac OS X Version 10.12.2 (Build 16C67) http://reinventedsoftware.com/feeder/</generator>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <language>en</language>
        <copyright>2015 Chris Krycho</copyright>
        <managingEditor>hello@newrustacean.com (Chris Krycho)</managingEditor>
        <webMaster>hello@newrustacean.com (Chris Krycho)</webMaster>
        <pubDate>Sun, 08 Jan 2017 22:41:14 -0500</pubDate>
        <lastBuildDate>Sun, 08 Jan 2017 22:41:15 -0500</lastBuildDate>
        <image>
            <url>http://newrustacean.com/podcast.png</url>
            <title>New Rustacean</title>
            <link>http://newrustacean.com</link>
            <width>144</width>
            <height>144</height>
        </image>
        <atom:link href="http://www.newrustacean.com/feed.xml" rel="self" type="application/rss+xml"/>
        <atom:link href="https://flattr.com/submit/auto?user_id=chriskrycho&amp;url=https%3A%2F%2Fflattr.com%2Fprofile%2Fchriskrycho&amp;title=Podcaster%2C%20software%20developer%2C%20writer%2C%20theologian&amp;description=I%20podcast%3A%0A%0A-%20%5BWinning%20Slowly%5D%28%2F%2Fwww.winningslowly.org%29%2C%20with%20Stephen%20Carradini%2C%20on%20technology%2C%20religion%2C%20ethics%2C%20and%20art%0A-%20%5BNew%20Rustacean%5D%28%2F%2Fwww.newrustacean.com%29%20%E2%80%93%20about%20learning%20the%20Rust%20programming%20language%0A-%20%5BSap.py%5D%28%2F%2Fwww.sap-py.com%29%20with%20my%20wife%2C%20Jaimie%20Krycho%0A-%20%5BRun%20With%20Me%5D%28%2F%2Frunwith.chriskrycho.com%29%20%E2%80%93%20a%203%E2%80%935%20minute%20%22microcast%22%20about%20running%2C%20recorded%20while%20running%0A%0AI%20write%20on%20art%2C%20theology%2C%20and%20technology%20at%20%5Bchriskrycho.com%5D%28%2F%2Fwww.chriskrycho.com%29.&amp;language=en_GB&amp;category=audio" rel="payment" type="text/html"/>
        <itunes:author>Chris Krycho</itunes:author>
        <itunes:subtitle>Let’s try some Rust, shall we?</itunes:subtitle>
        <itunes:summary><![CDATA[Documenting a journey into a new programming language—with source code, examples, and almost certainly some out-and-out hilarities along the way.]]></itunes:summary>
        <itunes:keywords>Rust,programming,programming languages,software</itunes:keywords>
        <itunes:image href="http://newrustacean.com/podcast.png"/>
        <itunes:explicit>clean</itunes:explicit>
        <itunes:owner>
            <itunes:name>Chris Krycho</itunes:name>
            <itunes:email>hello@newrustacean.com</itunes:email>
        </itunes:owner>
        <itunes:block>no</itunes:block>
        <itunes:category text="Technology">
            <itunes:category text="Software How-To"/>
            <itunes:category text="Tech News"/>
        </itunes:category>
        <itunes:category text="Education">
            <itunes:category text="Training"/>
        </itunes:category>
        <item>
            <title>CYSK: quick-xml</title>
            <link>http://newrustacean.com/show_notes/crates_you_should_know/_2/</link>
            <description><![CDATA[<p>A pull-parser for reading and writing XML.</p>

<h2 id="links">Links</h2>

<ul>
<li><a href="https://crates.io/crates/quick-xml">crates.io</a></li>
<li><a href="https://docs.rs/quick-xml/0.4.2/quick_xml/">docs.rs</a></li>
<li><a href="https://github.com/tafia/quick-xml">GitHub</a></li>
<li><a href="https://github.com/chriskrycho/lightning-rs/blob/a1fcd0af2435c5f2fd4d7c4ef3a5a88f89bdd9f5/src/syntax_highlighting.rs">syntax highlighting</a> &#8211; example from <a href="https://github.com/chriskrycho/lightning-rs">lightning-rs</a></li>
</ul>

<h2 id="sponsors">Sponsors</h2>

<ul>
<li>Aleksey Pirogov</li>
<li>Andreas Fischer</li>
<li>Ben Whitley</li>
<li>Cameron Mochrie</li>
<li><a href="http://home.red-oxide.org/">Chris Palmer</a></li>
<li><a href="http://blog.cgiffard.com">Christopher Giffard</a></li>
<li><a href="https://twitter.com/daniel_collin">Daniel Collin</a></li>
<li><a href="https://twitter.com/derekmorr">Derek Morr</a></li>
<li><a href="https://github.com/Limeth">Jakub &#8220;Limeth&#8221; Hlusička</a></li>
<li><a href="https://de.linkedin.com/in/juppm">Jupp Müller</a></li>
<li>Keith Gray</li>
<li>Lachlan Collins</li>
<li>Luca Schmid</li>
<li>Matt Rudder</li>
<li>Matthew Piziak</li>
<li>Micael Bergeron</li>
<li>Ovidiu Curcan</li>
<li><a href="https://pascalhertleif.de/">Pascal Hertleif</a></li>
<li>Peter Tillemans</li>
<li>Philipp Keller</li>
<li>Ralph Giles (&#8220;rillian&#8221;)</li>
<li>Raph Levien</li>
<li>reddraggone9</li>
<li>Ryan Ollos</li>
<li>Steven Murawksi</li>
<li>Vesa Kaihlavirta</li>
<li>Vlad Bezden</li>
<li><a href="http://willroe.me">William Roe</a></li>
<li>Zaki</li>
</ul>

<p>(Thanks to the couple people donating who opted out of the reward tier, as<br/>
well. You know who you are!)</p>

<h3 id="becomeasponsor">Become a sponsor</h3>

<ul>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li><a href="https://venmo.com/chriskrycho">Venmo</a></li>
<li><a href="https://www.dwolla.com/hub/chriskrycho">Dwolla</a></li>
<li><a href="https://cash.me/$chriskrycho">Cash.me</a></li>
<li><a href="https://flattr.com/profile/chriskrycho">Flattr</a></li>
<li><a href="https://paypal.me/chriskrycho">PayPal.me</a></li>
</ul>

<h2 id="contact">Contact</h2>

<ul>
<p><li>New Rustacean:</p>

<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul></li>
<p><li>Chris Krycho</p>

<ul>
<li>GitHub: <a href="https://github.com/chriskrycho">chriskrycho</a></li>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
</ul></li>
</ul>]]></description>
            <pubDate>Sun, 08 Jan 2017 22:38:08 -0500</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.mp3/cdn.newrustacean.com/csyk_1.mp3" length="7287954" type="audio/mpeg"/>
            <guid isPermaLink="false">1CF4B00D-9AEC-442B-BD06-A986602D2A56</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:summary><![CDATA[A pull-parser for reading and writing XML.


Sponsors

* Aleksey Pirogov

* Andreas Fischer

* Ben Whitley

* Cameron Mochrie

* Chris Palmer

* Christopher Giffard

* Daniel Collin

* Derek Morr

* Jakub “Limeth” Hlusička

* Jupp Müller

* Keith Gray

* Lachlan Collins

* Luca Schmid

* Matt Rudder

* Matthew Piziak

* Micael Bergeron

* Ovidiu Curcan

* Pascal Hertleif

* Peter Tillemans

* Philipp Keller

* Ralph Giles (“rillian”)

* Raph Levien

* reddraggone9

* Ryan Ollos

* Steven Murawksi

* Vesa Kaihlavirta

* Vlad Bezden

* William Roe

* Zaki

(Thanks to the couple people donating who opted out of the reward tier, as
well. You know who you are!)


Become a sponsor

* Patreon.com/newrustacean

* Venmo.com/chriskrycho

* Dwolla.com/hub/chriskrycho

* Cash.me/$chriskrycho

* Flattr.com/chriskrycho

* PayPal.me/chriskrycho

Contact

* New Rustacean:

* Twitter: @newrustacean

* Email: hello@newrustacean.com


* Chris Krycho

* GitHub: chriskrycho

* Twitter: @chriskrycho]]></itunes:summary>
            <itunes:duration>8:38</itunes:duration>
        </item>
        <item>
            <title>News 2: Let's talk roadmap!</title>
            <link>http://newrustacean.com/show_notes/news/_2/</link>
            <description><![CDATA[<p>Rust’s achievements in 2016 and goals for 2017</p>
<h2 id="links">Links</h2>
<ul>
<li>Rust releases:
<ul>
<li>1.10: <a href="https://blog.rust-lang.org/2016/07/07/Rust-1.10.html">blog post</a> | <a href="https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1100-2016-07-07">release notes</a></li>
<li>1.11: <a href="https://blog.rust-lang.org/2016/08/18/Rust-1.11.html">blog post</a> | <a href="https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1110-2016-08-18">release notes</a></li>
<li>1.12: <a href="https://blog.rust-lang.org/2016/09/29/Rust-1.12.html">blog post</a> | <a href="https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1120-2016-09-29">release notes</a></li>
<li>1.12.1: <a href="https://blog.rust-lang.org/2016/10/20/Rust-1.12.1.html">blog post</a></li>
<li>1.13: <a href="https://blog.rust-lang.org/2016/11/10/Rust-1.13.html">blog post</a> | <a href="https://github.com/rust-lang/rust/blob/stable/RELEASES.md#version-1130-2016-11-10">release notes</a></li>
<li>1.14: <a href="https://blog.rust-lang.org/2016/12/22/Rust-1.14.html">blog post</a> | <a href="https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1140-2016-12-22">release notes</a></li>
</ul></li>
<li>Rust 2017 roadmap
<ul>
<li><a href="https://github.com/aturon/rfcs/blob/4f40ba07f2a0730c188cb5db6b0b9c5887ae1801/text/0000-roadmap-2017.md">RFC text</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/1774">RFC discussion</a></li>
</ul></li>
<li>Other official Rust blog posts:
<ul>
<li><a href="https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html">Shape of errors to come</a></li>
<li><a href="https://blog.rust-lang.org/2016/09/08/incremental.html">Incremental compilation</a>
<ul>
<li>Milestone: <a href="https://github.com/rust-lang/rust/milestone/30">beta</a></li>
<li>Milestone: <a href="https://github.com/rust-lang/rust/milestone/31">across crates</a></li>
<li>Milestone: <a href="https://github.com/rust-lang/rust/milestone/32">in typechecking</a></li>
</ul></li>
</ul></li>
<li>Cargo workspaces:
<ul>
<li><a href="https://github.com/rust-lang/rfcs/blob/master/text/1525-cargo-workspace.md">Original RFC</a> and <a href="https://github.com/rust-lang/rfcs/pull/1525">discussion</a></li>
<li><a href="http://doc.crates.io/manifest.html#the-workspace-section">Documentation</a></li>
</ul></li>
<li>Rust Language Service:
<ul>
<li><a href="https://internals.rust-lang.org/t/introducing-rust-language-server-source-release/4209">Announcement post</a> on internals.rust-lang.org</li>
<li><a href="https://www.youtube.com/watch?time_continue=2405&amp;v=pTQxHIzGqFI">Demo</a></li>
</ul></li>
<li>Non-core projects mentioned on the show:
<ul>
<li><a href="https://github.com/alexcrichton/futures-rs">Futures</a></li>
<li><a href="https://github.com/tokio-rs/tokio">Tokio</a></li>
<li><a href="https://rocket.rs">Rocket</a></li>
</ul></li>
<li>My projects
<ul>
<li><a href="https://github.com/chriskrycho/lightning-rs">Lightning</a></li>
<li>RFC #1636:
<ul>
<li><a href="https://github.com/rust-lang/rfcs/blob/master/text/1636-document_all_features.md">text</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/1636">discussion</a></li>
<li><a href="https://github.com/rust-lang/rust/issues/38643">tracking issue</a> (where you can contribute!)</li>
</ul></li>
</ul></li>
</ul>
<h2 id="sponsors">Sponsors</h2>
<ul>
<li>Aleksey Pirogov</li>
<li>Andreas Fischer</li>
<li>Ben Whitley</li>
<li>Cameron Mochrie</li>
<li><a href="http://home.red-oxide.org/">Chris Palmer</a></li>
<li><a href="https://twitter.com/daniel_collin">Daniel Collin</a></li>
<li><a href="https://twitter.com/derekmorr">Derek Morr</a></li>
<li><a href="https://github.com/Limeth">Jakub “Limeth” Hlusička</a></li>
<li><a href="https://de.linkedin.com/in/juppm">Jupp Müller</a></li>
<li>Keith Gray</li>
<li>Lachlan Collins</li>
<li>Luca Schmid</li>
<li>Matt Rudder</li>
<li>Matthew Piziak</li>
<li>Micael Bergeron</li>
<li>Ovidiu Curcan</li>
<li><a href="https://pascalhertleif.de/">Pascal Hertleif</a></li>
<li>Peter Tillemans</li>
<li><a href="https://twitter.com/hansapla">Philipp Keller</a></li>
<li>Ralph Giles (“rillian”)</li>
<li>Raph Levien</li>
<li>reddraggone9</li>
<li>Ryan Ollos</li>
<li>Steven Murawksi</li>
<li>Vesa Kaihlavirta</li>
<li>Vlad Bezden</li>
<li><a href="http://willroe.me">William Roe</a></li>
<li>Zaki</li>
</ul>
<p>(Thanks to the couple people donating who opted out of the reward tier, as well. You know who you are!)</p>
<h3 id="become-a-sponsor">Become a sponsor</h3>
<ul>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li><a href="https://venmo.com/chriskrycho">Venmo</a></li>
<li><a href="https://www.dwolla.com/hub/chriskrycho">Dwolla</a></li>
<li><a href="https://cash.me/$chriskrycho">Cash.me</a></li>
<li><a href="https://flattr.com/profile/chriskrycho">Flattr</a></li>
<li><a href="https://paypal.me/chriskrycho">PayPal.me</a></li>
</ul>
<h2 id="contact">Contact</h2>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul></li>
<li>Chris Krycho
<ul>
<li>GitHub: <a href="https://github.com/chriskrycho">chriskrycho</a></li>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
</ul></li>
</ul>
]]></description>
            <pubDate>Thu, 29 Dec 2016 14:00:00 -0500</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.mp3/cdn.newrustacean.com/news_2.mp3" length="17777740" type="audio/mpeg"/>
            <guid isPermaLink="false">7AAC0E06-6A11-4707-BD9A-AB5AD95F7CBB</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:summary><![CDATA[Rust’s achievements in 2016 and goals for 2017


Sponsors

* Aleksey Pirogov

* Andreas Fischer

* Ben Whitley

* Cameron Mochrie

* Chris Palmer

* Daniel Collin

* Derek Morr

* Jakub “Limeth” Hlusička

* Jupp Müller

* Keith Gray

* Lachlan Collins

* Luca Schmid

* Matt Rudder

* Matthew Piziak

* Micael Bergeron

* Ovidiu Curcan

* Pascal Hertleif

* Peter Tillemans

* Philipp Keller

* Ralph Giles (“rillian”)

* Raph Levien

* reddraggone9

* Ryan Ollos

* Steven Murawksi

* Vesa Kaihlavirta

* Vlad Bezden

* William Roe

* Zaki

(Thanks to the couple people donating who opted out of the reward tier, as well. You know who you are!)


Become a sponsor

* Patreon.com/chriskrycho

* Venmo.com/chriskrycho

* Dwolla.com/hub/chriskrycho

* Cash.me/$chriskrycho

* Flattr.com/chriskrycho

* PayPal.me/chriskrycho


Contact

* New Rustacean:

* Twitter: @newrustacean

* Email: hello@newrustacean.com

* Chris Krycho

* GitHub: chriskrycho

* Twitter: @chriskrycho]]></itunes:summary>
            <itunes:duration>21:08</itunes:duration>
        </item>
        <item>
            <title>Meta 1 – Slowing Down</title>
            <link>http://newrustacean.com/show_notes/meta/_1/</link>
            <description><![CDATA[<p>Avoiding burnout by taking it a little easier.</p>
<p>Sometimes, the way a podcast stays in existence is by coming out less often. That’s what’s happening here.</p>
<h1 id="links">Links</h1>
<ul>
<li><a href="https://github.com/chriskrycho/lightning-rs">lightning-rs</a></li>
<li><a href="http://getpelican.com">Pelican</a></li>
<li><a href="https://gohugo.io">Hugo</a></li>
<li><a href="https://jekyllrb.com">Jekyll</a></li>
<li><a href="https://staticsitegenerators.net">Static Site Generators</a>: The definitive listing of Static Site Generators — all 445 of them!</li>
</ul>
<h2 id="become-a-sponsor">Become a sponsor</h2>
<ul>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li><a href="https://venmo.com/chriskrycho">Venmo</a></li>
<li><a href="https://www.dwolla.com/hub/chriskrycho">Dwolla</a></li>
<li><a href="https://cash.me/$chriskrycho">Cash.me</a></li>
<li><a href="https://flattr.com/profile/chriskrycho">Flattr</a></li>
<li><a href="https://paypal.me/chriskrycho">PayPal.me</a></li>
</ul>
<h1 id="follow">Follow</h1>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>App.net: <a href="https://alpha.app.net/newrustacean">@newrustacean</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul></li>
<li>Chris Krycho
<ul>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
</ul></li>
</ul>
]]></description>
            <pubDate>Sat, 12 Nov 2016 13:26:56 -0500</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.mp3/cdn.newrustacean.com/meta_1.mp3" length="6494113" type="audio/mpeg"/>
            <guid isPermaLink="false">40FB0537-15C7-475A-94ED-090F9887A358</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:summary><![CDATA[Avoiding burnout by taking it a little easier.

Sometimes, the way a podcast stays in existence is by coming out less often. That's what's happening here.

# Links

  - [lightning-rs]
  - [Pelican]
  - [Hugo]
  - [Jekyll]
  - [Static Site Generators]\: The definitive listing of Static Site Generators — all 445 of them!

[lightning-rs]: https://github.com/chriskrycho/lightning-rs
[Pelican]: http://getpelican.com
[Hugo]: https://gohugo.io
[Jekyll]: https://jekyllrb.com
[Static Site Generators]: https://staticsitegenerators.net

# Become a sponsor

  - [Patreon](https://www.patreon.com/newrustacean)
  - [Venmo](https://venmo.com/chriskrycho)
  - [Dwolla](https://www.dwolla.com/hub/chriskrycho)
  - [Cash.me](https://cash.me/$chriskrycho)

# Follow

  - New Rustacean:
      + Twitter: [@newrustacean](https://www.twitter.com/newrustacean)
      + Email: [hello@newrustacean.com](mailto:hello@newrustacean.com)
  - Chris Krycho
      + Twitter: [@chriskrycho](https://www.twitter.com/chriskrycho)

]]></itunes:summary>
            <itunes:duration>7:42</itunes:duration>
        </item>
        <item>
            <title>Interview 3 – Carol (Nichols || Goulding)</title>
            <link>http://newrustacean.com/show_notes/interview/_3/</link>
            <description><![CDATA[Carol (Nichols || Goulding) on learning Rust, teaching Rust, and building community
<br />
<h2 id="notes">Notes</h2>Chris talks with Carol (Nichols || Goulding), a Rust community team member, co-author of the first major revision of <em>The Rust Programming Language</em>, and co-founder of the first Rust consultancy.
<br />
<h2 id="links">Links</h2>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/XSLT"><abbr>XSLT</abbr> (XML Style Sheet Transformations)</a></li>
<li><a href="http://rspec.info">Rspec</a></li>
<li><a href="http://rubyonrails.org">Rails</a></li>
<li><a href="https://www.thinkthroughmath.com">Think Through Math</a> — remedial math tutoring app built with Rails</li>
<li><a href="https://github.com/steveklabnik/rust_for_rubyists">Rust for Rubyists</a></li>
<li><a href="https://doc.rust-lang.org/book/"><em>The Rust Programming Language</em></a></li>
<li><a href="http://jvns.ca">Julia Evans</a>
<ul>
<li><a href="http://jvns.ca/blog/2016/09/11/rustconf-keynote/">RustConf 2016 keynote</a></li>
</ul>
</li>
<li><a href="http://rustbyexample.com"><em>Rust by Example</em></a></li>
<li><a href="https://github.com/carols10cents/rustlings">Rustlings</a></li>
<li>SASS
<ul>
<li><a href="http://sass-lang.com">language</a></li>
<li><a href="https://github.com/carols10cents/sassers">Carol’s in-progress implementation</a></li>
</ul>
</li>
<li><a href="https://chat.mibbit.com/?server=irc.mozilla.org&amp;channel=%23rust-community">#rust-community</a> — open meetings at 4pm UTC every Wednesday, with minutes available online</li>
<li><a href="https://blog.rust-lang.org/2016/06/30/State-of-Rust-Survey-2016.html">first Rust community survey</a></li>
<li><a href="https://github.com/rust-community">Rust community on GitHub</a></li>
<li><a href="http://rust-lang.github.io/book/">new version of the book on GitHub</a> — <em>you</em> can help, and especially if you’re new, because Steve and Carol both need input to deal with the “familiarity”/<a href="https://en.wikipedia.org/wiki/Curse_of_knowledge">“curse of knowledge”</a> problem
<ul>
<li>ownership and borrowing chapters</li>
</ul>
</li>
<li><a href="http://rustconf.com">RustConf</a></li>
<li><a href="http://www.rustfest.eu">RustFest</a></li>
<li><a href="http://www.rust-belt-rust.com">Rust Belt Rust</a> — October 27–28, 2016. <em>Don’t forget to use code <strong>newrustacean</strong> to get 20% off of your registration cost!</em></li>
<li><a href="http://www.integer32.com">Integer32</a>
<ul>
<li>Panoptics – nickel-jwt: <a href="https://crates.io/crates/nickel-jwt-session">crate</a> | <a href="https://docs.rs/nickel-jwt-session/">docs</a> | <a href="https://github.com/kaj/nickel-jwt-session">source</a></li>
</ul>
</li>
<li><a href="http://stackoverflow.com/cv/jake(Nichols || Goulding)">Jake (Nichols || Goulding) on Stack Overflow</a></li>
<li><a href="https://github.com/rust-lang/rust-wiki-backup/blob/master/Doc-friends-of-the-tree.md">Friends of the Tree</a></li>
<li><a href="https://github.com/rust-community/team/issues/51">Friends of the Forest</a></li>
<li><a href="http://www.alibris.com/booksearch?keyword=working%20effectively%20with%20legacy%20code"><em>Working Effectively With Legacy Code</em></a></li>
<li>Tilde</li>
<li><a href="http://www.alibris.com/The-C-Programming-Language-Brian-Kernighan/book/875968"><em>The C Programming Language</em></a> – the book Carol compared <em>The Rust Programming Language</em> to in terms of its responsibilities, and also one of the books from which Chris learned C.</li>
</ul>
<h2 id="sponsors">Sponsors</h2>
<ul>
<li>Aleksey Pirogov</li>
<li>Cameron Mochrie</li>
<li><a href="http://home.red-oxide.org/">Chris Palmer</a></li>
<li><a href="twitter.com/daniel_collin">Daniel Collin</a></li>
<li><a href="https://twitter.com/derekmorr">Derek Morr</a></li>
<li>Doug Reeves</li>
<li>Hamza Sheikh</li>
<li><a href="https://github.com/Limeth">Jakub “Limeth” Hlusička</a></li>
<li><a href="https://de.linkedin.com/in/juppm">Jupp Müller</a></li>
<li>Keith Gray</li>
<li>Lachlan Collins</li>
<li>Leif Arne Storset</li>
<li>Luca Schmid</li>
<li>Matthew Piziak</li>
<li>Micael Bergeron</li>
<li>Nils Tekampe</li>
<li>Ovidiu Curcan</li>
<li><a href="https://pascalhertleif.de/">Pascal Hertleif</a></li>
<li>Ralph Giles (“rillian”)</li>
<li>Ralph “FriarTech” Loizzo</li>
<li>Raph Levien</li>
<li>reddraggone9</li>
<li>Ryan Ollos</li>
<li>Sean Jensen-Gray</li>
<li>Steven Murawksi</li>
<li>Vesa Kaihlavirta</li>
<li><a href="http://willroe.me">William Roe</a></li>
</ul>
(Thanks to the couple people donating who opted out of the reward tier, as well. You know who you are!)
<br />
<h3 id="become-a-sponsor">Become a sponsor</h3>
<ul>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li><a href="https://venmo.com/chriskrycho">Venmo</a></li>
<li><a href="https://www.dwolla.com/hub/chriskrycho">Dwolla</a></li>
<li><a href="https://cash.me/$chriskrycho">Cash.me</a></li>
<li><a href="https://flattr.com/profile/chriskrycho">Flattr</a></li>
<li><a href="https://paypal.me/chriskrycho">PayPal.me</a></li>
</ul>
<h2 id="contact">Contact</h2>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul>
</li>
<li>Chris Krycho
<ul>
<li>GitHub: <a href="https://github.com/chriskrycho">chriskrycho</a></li>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
</ul>
</li>
</ul>]]></description>
            <pubDate>Fri, 30 Sep 2016 08:00:00 -0400</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.mp3/cdn.newrustacean.com/interview_3.mp3" length="39738296" type="audio/mpeg"/>
            <guid isPermaLink="false">7299496B-086C-450F-94C1-05AB08CDC294</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:summary><![CDATA[Carol (Nichols || Goulding) on learning Rust, teaching Rust, and building community

Chris talks with Carol (Nichols || Goulding), a Rust community team member, co-author of the first major revision of The Rust Programming Language, and co-founder of the first Rust consultancy.


Sponsors

* Aleksey Pirogov

* Cameron Mochrie

* Chris Palmer

* Daniel Collin

* Derek Morr

* Doug Reeves

* Hamza Sheikh

* Jakub “Limeth” Hlusička

* Jupp Müller

* Keith Gray

* Lachlan Collins

* Leif Arne Storset

* Luca Schmid

* Matthew Piziak

* Micael Bergeron

* Nils Tekampe

* Ovidiu Curcan

* Pascal Hertleif

* Ralph Giles (“rillian”)

* Ralph “FriarTech” Loizzo

* Raph Levien

* reddraggone9

* Ryan Ollos

* Sean Jensen-Gray

* Steven Murawksi

* Vesa Kaihlavirta

* William Roe

(Thanks to the couple people donating who opted out of the reward tier, as well. You know who you are!)


Become a sponsor

* Patreon.com/newrustacean

* Venmo.com/newrustacean

* Dwolla.com/hub/chriskrycho

* Cash.me/$chriskrycho

* Flattr.com/profile/chriskrycho

* PayPal.me/chriskrycho

Contact

* New Rustacean:

* Twitter: @newrustacean

* Email: hello@newrustacean.com

* Chris Krycho

* GitHub: chriskrycho

* Twitter: @chriskrycho]]></itunes:summary>
            <itunes:duration>47:11</itunes:duration>
        </item>
        <item>
            <title>Bonus 7: Katas—or: learning by doing</title>
            <link>http://newrustacean.com/show_notes/bonus/_7/</link>
            <description><![CDATA[<p>Katas—or: learning by doing</p>
<h2 id="notes">Notes</h2>
<p>One of the best ways to learn is to pick a small problem you have already internalized, and to do it again but in a new language or in a new way in a language you already know.</p>
<h2 id="links">Links</h2>
<ul>
<li><a href="http://arewegameyet.com">AreWeGameYet</a></li>
<li><a href="https://areweideyet.com">AreWeIDEYet</a></li>
<li><a href="http://www.arewewebyet.org">AreWeWebYet</a></li>
<li><a href="https://internals.rust-lang.org/t/setting-our-vision-for-the-2017-cycle/3958">Setting our vision for the 2017 cycle</a></li>
<li><a href="https://blog.rust-lang.org/2016/09/08/incremental.html">Incremental Compilation</a></li>
<li><code>cargo-incremental</code>:
<ul>
<li><a href="https://internals.rust-lang.org/t/want-to-help-develop-tool-for-testing-incremental-compilation/3963">internals post</a></li>
<li><a href="https://github.com/nikomatsakis/cargo-incremental/">repo</a></li>
</ul></li>
<li><a href="http://elm-lang.org">Elm</a></li>
<li>Dave Thomas’ <a href="http://codekata.com">CodeKata</a></li>
<li>Crates I used in my Rust “kata”:
<ul>
<li>Hyper
<ul>
<li><a href="https://docs.rs/hyper/">docs</a></li>
<li><a href="https://crates.io/crates/hyper">crate</a></li>
<li><a href="https://github.com/hyperium/hyper">repo</a></li>
</ul></li>
<li>Serde
<ul>
<li><a href="https://docs.rs/serde/">docs</a></li>
<li><a href="https://crates.io/crates/serde">crate</a></li>
<li><a href="https://github.com/serde-rs/serde">repo</a></li>
</ul></li>
<li>Pencil (inspired by <a href="http://flask.pocoo.org">Flask</a>)
<ul>
<li><a href="https://docs.rs/pencil/">docs</a></li>
<li><a href="https://crates.io/crates/pencil">crate</a></li>
<li><a href="https://github.com/fengsp/pencil">repo</a></li>
</ul></li>
<li><code>handlebars-rust</code>:
<ul>
<li><a href="https://docs.rs/handlebars/">docs</a></li>
<li><a href="https://crates.io/crates/handlebars">crate</a></li>
<li><a href="https://github.com/sunng87/handlebars-rust">repo</a></li>
</ul></li>
</ul></li>
</ul>
<h2 id="sponsors">Sponsors</h2>
<ul>
<li>Aleksey Pirogov</li>
<li>Cameron Mochrie</li>
<li><a href="http://home.red-oxide.org/">Chris Palmer</a></li>
<li><a href="twitter.com/daniel_collin">Daniel Collin</a></li>
<li><a href="https://twitter.com/derekmorr">Derek Morr</a></li>
<li>Doug Reeves</li>
<li>Hamza Sheikh</li>
<li><a href="https://github.com/Limeth">Jakub “Limeth” Hlusička</a></li>
<li><a href="https://de.linkedin.com/in/juppm">Jupp Müller</a></li>
<li>Keith Gray</li>
<li>Lachlan Collins</li>
<li>Leif Arne Storset</li>
<li>Luca Schmid</li>
<li>Matthew Piziak</li>
<li>Micael Bergeron</li>
<li>Ovidiu Curcan</li>
<li><a href="https://pascalhertleif.de/">Pascal Hertleif</a></li>
<li>Ralph Giles (“rillian”)</li>
<li>Ralph “FriarTech” Loizzo</li>
<li>Raph Levien</li>
<li>reddraggone9</li>
<li>Ryan Ollos</li>
<li>Steven Murawksi</li>
<li>Vesa Kaihlavirta</li>
<li><a href="http://willroe.me">William Roe</a></li>
</ul>
<p>(Thanks to the couple people donating who opted out of the reward tier, as well. You know who you are!)</p>
<h3 id="become-a-sponsor">Become a sponsor</h3>
<ul>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li><a href="https://venmo.com/chriskrycho">Venmo</a></li>
<li><a href="https://www.dwolla.com/hub/chriskrycho">Dwolla</a></li>
<li><a href="https://cash.me/$chriskrycho">Cash.me</a></li>
<li><a href="https://flattr.com/profile/chriskrycho">Flattr</a></li>
<li><a href="https://paypal.me/chriskrycho">PayPal.me</a></li>
</ul>
<h2 id="contact">Contact</h2>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul></li>
<li>Chris Krycho
<ul>
<li>GitHub: <a href="https://github.com/chriskrycho">chriskrycho</a></li>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
</ul></li>
</ul>
]]></description>
            <pubDate>Sat, 10 Sep 2016 13:50:19 -0400</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.mp3/cdn.newrustacean.com/bonus_7.mp3" length="7533006" type="audio/mpeg"/>
            <guid isPermaLink="false">CEFB964C-E0C9-48FD-9EE6-06A0C1284CC8</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:summary><![CDATA[Katas—or: learning by doing

One of the best ways to learn is to pick a small problem you have already internalized, and to do it again but in a new language or in a new way in a language you already know.


Sponsors

* Aleksey Pirogov
* Cameron Mochrie
* Chris Palmer
* Daniel Collin
* Derek Morr
* Doug Reeves
* Hamza Sheikh
* Jakub “Limeth” Hlusička
* Jupp Müller
* Keith Gray
* Lachlan Collins
* Leif Arne Storset
* Luca Schmid
* Matthew Piziak
* Micael Bergeron
* Ovidiu Curcan
* Pascal Hertleif
* Ralph Giles (“rillian”)
* Ralph “FriarTech” Loizzo
* Raph Levien
* reddraggone9
* Ryan Ollos
* Steven Murawksi
* Vesa Kaihlavirta
* William Roe

(Thanks to the couple people donating who opted out of the reward tier, as well. You know who you are!)

Become a sponsor

* Patreon.com/newrustacean
* Venmo.com/chriskrycho
* Dwolla.com/hub/chriskrycho
* Cash.me/$chriskrych
* flattr.com/profile/chriskrycho
* PayPal.me/chriskrycho

Contact

* New Rustacean:
* Twitter: @newrustacean
* Email: hello@newrustacean.com
* Chris Krycho
* GitHub: chriskrycho
* Twitter: @chriskrycho]]></itunes:summary>
            <itunes:duration>10:19</itunes:duration>
        </item>
        <item>
            <title>Bonus 6: It doesn‘t have to be sexy</title>
            <link>http://newrustacean.com/show_notes/bonus/_6/</link>
            <description><![CDATA[<p>Building (and celebrating) all the little, not-so-glorious pieces of the Rust ecosystem.</p>
<h2 id="notes">Notes</h2>
<p>We love the Rust compiler team. But there’s more to the Rust community, and more required for Rust to be as great as it can be, than just the language itself. We need to celebrate other libraries, and even the small ones, just as much (and maybe more) than changes to the language. We need to dig in and work on building the <em>whole</em> ecosystem. (The good news is, we are!)</p>
<h2 id="links">Links</h2>
<ul>
<li><a href="https://github.com/alexcrichton/futures-rs"><code>futures-rs</code></a>
<ul>
<li><a href="http://aturon.github.io/blog/2016/08/11/futures/">“Zero-cost futures in Rust”</a></li>
</ul></li>
<li><a href="https://github.com/tokio-rs/tokio">Tokio</a>
<ul>
<li><a href="https://medium.com/@carllerche/announcing-tokio-df6bb4ddb34#.c9pqf9wyx">“Announcing Tokio”</a> (Carl Lerche on Medium)</li>
</ul></li>
<li><a href="http://words.steveklabnik.com/whats-new-with-the-rust-programming-language">“What’s new with ‘The Rust Programming Language’?”</a></li>
<li><a href="https://www.rust-lang.org/en-US/friends.html">Friends of Rust</a></li>
<li><a href="https://github.com/briansmith/ring"><code>ring</code></a> – Safe, fast, small crypto using Rust</li>
<li><a href="https://github.com/neil-lobracco/alexa-rs"><code>alexa-rs</code></a> – Rust library for building Alexa skills</li>
<li><a href="https://gitlab.com/Arvamer/gilrs"><code>gilrs</code></a> – Game Input Library for Rust</li>
</ul>
<h2 id="sponsors">Sponsors</h2>
<ul>
<li>Aleksey Pirogov</li>
<li>Cameron Mochrie</li>
<li>Cass Costello</li>
<li><a href="http://home.red-oxide.org/">Chris Palmer</a></li>
<li><a href="twitter.com/daniel_collin">Daniel Collin</a></li>
<li><a href="https://twitter.com/derekmorr">Derek Morr</a></li>
<li>Doug Reeves</li>
<li>Eric Fulmer</li>
<li>Hamza Sheikh</li>
<li><a href="https://github.com/Limeth">Jakub “Limeth” Hlusička</a></li>
<li><a href="http://twitter.com/jaredthecoder">Jared Smith</a></li>
<li>Keith Gray</li>
<li>Lachlan Collins</li>
<li>Leif Arne Storset</li>
<li>Luca Schmid</li>
<li>Micael Bergeron</li>
<li><a href="https://pascalhertleif.de/">Pascal Hertleif</a></li>
<li>Ralph Giles (“rillian”)</li>
<li>Ralph “FriarTech” Loizzo</li>
<li>Raph Levien</li>
<li>reddraggone9</li>
<li>Ryan Ollos</li>
<li>Steven Murawksi</li>
<li>Vesa Kaihlavirta</li>
<li><a href="http://willroe.me">William Roe</a></li>
</ul>
<p>(Thanks to the couple people donating who opted out of the reward tier, as well. You know who you are!)</p>
<h3 id="become-a-sponsor">Become a sponsor</h3>
<ul>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li><a href="https://venmo.com/chriskrycho">Venmo</a></li>
<li><a href="https://www.dwolla.com/hub/chriskrycho">Dwolla</a></li>
<li><a href="https://cash.me/$chriskrycho">Cash.me</a></li>
<li><a href="https://flattr.com/profile/chriskrycho">Flattr</a></li>
<li><a href="https://paypal.me/chriskrycho">PayPal.me</a></li>
</ul>
<h2 id="contact">Contact</h2>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul></li>
<li>Chris Krycho
<ul>
<li>GitHub: <a href="https://github.com/chriskrycho">chriskrycho</a></li>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
</ul></li>
</ul>
]]></description>
            <pubDate>Sat, 20 Aug 2016 12:15:43 -0400</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.mp3/cdn.newrustacean.com/bonus_6.mp3" length="8275634" type="audio/mpeg"/>
            <guid isPermaLink="false">2B30AB4B-8971-4576-BAD0-953A078B51A3</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:summary><![CDATA[Building (and celebrating) all the little, not-so-glorious pieces of the Rust ecosystem.


Notes

We love the Rust compiler team. But there’s more to the Rust community, and more required for Rust to be as great as it can be, than just the language itself. We need to celebrate other libraries, and even the small ones, just as much (and maybe more) than changes to the language. We need to dig in and work on building the _whole_ ecosystem. (The good news is, we are!)


Links

-   futures-rs
    -   “Zero-cost futures in Rust”
-   Tokio
    -   “Announcing Tokio” (Carl Lerche on Medium)
-   “What’s new with ‘The Rust Programming Language’?”
-   Friends of Rust
-   ring – Safe, fast, small crypto using Rust
-   alexa-rs – Rust library for building Alexa skills
-   gilrs – Game Input Library for Rust


Sponsors

-   Aleksey Pirogov
-   Cameron Mochrie
-   Cass Costello
-   Chris Palmer
-   Daniel Collin
-   Derek Morr
-   Doug Reeves
-   Eric Fulmer
-   Hamza Sheikh
-   Jakub “Limeth” Hlusička
-   Jared Smith
-   Keith Gray
-   Lachlan Collins
-   Leif Arne Storset
-   Luca Schmid
-   Micael Bergeron
-   Pascal Hertleif
-   Ralph Giles (“rillian”)
-   Ralph “FriarTech” Loizzo
-   Raph Levien
-   reddraggone9
-   Ryan Ollos
-   Steven Murawksi
-   Vesa Kaihlavirta
-   William Roe

(Thanks to the couple people donating who opted out of the reward tier,
as well. You know who you are!)

Become a sponsor

-   Patreon.com/newrustacean
-   Venmo.com/chriskrycho
-   Dwolla.com/hub/chriskrycho
-   Cash.me/$chriskrycho
-   flattr.com/profile/chriskrycho
-   PayPal.me/chriskrycho


Contact

-   New Rustacean:
    -   Twitter: @newrustacean
    -   Email: hello@newrustacean.com
-   Chris Krycho
    -   GitHub: chriskrycho
    -   Twitter: @chriskrycho

]]></itunes:summary>
            <itunes:duration>11:27</itunes:duration>
        </item>
        <item>
            <title>e017: Point me where I need to go</title>
            <link>http://newrustacean.com/show_notes/e017/</link>
            <description><![CDATA[<p>A deep dive on references and pointers in Rust.</p>
<h2 id="notes">Notes</h2>
<p>By listener request, today we look at the syntax and semantics of referencing and dereferencing and the corresponding <code>&amp;</code> and <code>*</code> operators.</p>
<p>As was the case with <a href="http://newrustacean.dev/show_notes/e016/">e016</a>, the code samples have little to say in their documentation; <em>reading</em> the code will be necessary for seeing the ideas.</p>
<h2 id="links">Links</h2>
<ul>
<li><a href="https://medium.com/@raphlinus/inside-the-fastest-font-renderer-in-the-world-75ae5270c445#.1opn7gihv">“Inside the Fastest Font Renderer in the World”</a></li>
<li>The Rust Platform:
<ul>
<li><a href="http://aturon.github.io/blog/2016/07/27/rust-platform/">original blog post</a>
<ul>
<li><a href="https://internals.rust-lang.org/t/proposal-the-rust-platform/3745">Rust internals discussion</a></li>
<li><a href="https://www.reddit.com/r/rust/comments/4uxdn8/the_rust_platform_aaron_turon/?">Reddit discussion</a></li>
<li><a href="https://news.ycombinator.com/item?id=12177002">Hacker News discussion</a></li>
</ul></li>
<li><a href="https://internals.rust-lang.org/t/follow-up-the-rust-platform/3782">follow-up</a>
<ul>
<li><a href="https://www.reddit.com/r/rust/comments/4v9eo0/follow_up_to_the_rust_platform/?">Reddit discussion</a></li>
</ul></li>
</ul></li>
<li><a href="https://users.rust-lang.org/t/cargo-vendoring-now-on-nightly/6776">Cargo vendoring support in nightly</a></li>
<li><a href="https://github.com/rust-lang/rust/pull/34096">MIR on by default in nightly</a></li>
<li>References and dereferencing:
<ul>
<li><em>The Rust Programming Language</em>:
<ul>
<li><a href="https://doc.rust-lang.org/book/references-and-borrowing.html">References and Borrowing</a></li>
<li><a href="https://doc.rust-lang.org/book/deref-coercions.html"><code>Deref</code> coercions</a></li>
</ul></li>
<li><em>Rust by Example</em>: <a href="http://rustbyexample.com/flow_control/match/destructuring/destructure_pointers.html">Flow Control: pointers/ref</a></li>
<li>The Rust Reference:
<ul>
<li><a href="https://doc.rust-lang.org/reference.html#unary-operator-expressions">Unary Operator Expressions</a></li>
<li><a href="https://doc.rust-lang.org/reference.html#pointer-types">Pointer Types</a></li>
</ul></li>
</ul></li>
</ul>
<h2 id="sponsors">Sponsors</h2>
<ul>
<li>Aleksey Pirogov</li>
<li>Cameron Mochrie</li>
<li>Cass Costello</li>
<li><a href="http://home.red-oxide.org/">Chris Palmer</a></li>
<li><a href="twitter.com/daniel_collin">Daniel Collin</a></li>
<li><a href="https://twitter.com/derekmorr">Derek Morr</a></li>
<li>Doug Reeves</li>
<li>Eric Fulmer</li>
<li>Hamza Sheikh</li>
<li><a href="https://github.com/Limeth">Jakub “Limeth” Hlusička</a></li>
<li><a href="http://twitter.com/jaredthecoder">Jared Smith</a></li>
<li>Keith Gray</li>
<li>Lachlan Collins</li>
<li>Leif Arne Storset</li>
<li>Luca Schmid</li>
<li>Micael Bergeron</li>
<li><a href="https://pascalhertleif.de/">Pascal Hertleif</a></li>
<li>Ralph Giles (“rillian”)</li>
<li>Ralph “FriarTech” Loizzo</li>
<li>Raph Levien</li>
<li>reddraggone9</li>
<li>Ryan Ollos</li>
<li>Steven Murawksi</li>
<li>Vesa Kaihlavirta</li>
<li><a href="http://willroe.me">William Roe</a></li>
</ul>
<p>(Thanks to the couple people donating who opted out of the reward tier, as well. You know who you are!)</p>
<h3 id="become-a-sponsor">Become a sponsor</h3>
<ul>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li><a href="https://venmo.com/chriskrycho">Venmo</a></li>
<li><a href="https://www.dwolla.com/hub/chriskrycho">Dwolla</a></li>
<li><a href="https://cash.me/$chriskrycho">Cash.me</a></li>
<li><a href="https://flattr.com/profile/chriskrycho">Flattr</a></li>
<li><a href="https://paypal.me/chriskrycho">PayPal.me</a></li>
</ul>
<h2 id="contact">Contact</h2>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul></li>
<li>Chris Krycho
<ul>
<li>GitHub: <a href="https://github.com/chriskrycho">chriskrycho</a></li>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
</ul></li>
</ul>
]]></description>
            <pubDate>Mon, 08 Aug 2016 16:35:00 -0400</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.mp3/cdn.newrustacean.com/e017.mp3" length="7768525" type="audio/mpeg"/>
            <guid isPermaLink="false">3FD4B9E5-7496-4FCB-AD95-829A6A295274</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:summary><![CDATA[A deep dive on references and pointers in Rust.


Notes

By listener request, today we look at the syntax and semantics of referencing and dereferencing and the corresponding `&` and `*` operators.

As was the case with e016, the code samples have little to say in their documentation; reading the code will be necessary for seeing the ideas.


Sponsors

* Aleksey Pirogue

* Cameron Mochrie

* Chris Palmer

* Daniel Collin

* Derek Morr

* Doug Reeves

* Eric Fulmer

* Hamza Sheikh

* Jakub “Limeth” Hlusička

* Jared Smith

* Keith Gray

* Lachlan Collins

* Leif Arne Storset

* Luca Schmid

* Micael Bergeron

* Pascal Hertleif

* Ralph Giles (“gillian”)

* Ralph “FriarTech” Loizzo

* Raph Levien

* reddraggone9

* Ryan Oleos

* Steven Murawksi

* Vesa Kaihlavirta

* William Roe

(Thanks to the couple people donating who opted out of the reward tier, as well. You know who you are!)

Become a sponsor

* Patreon.com/newrustacean

* Venmo.com/chriskrycho

* Dwolla.com/hub/chriskrycho

* Cash.me/$chriskrych

* flattr.com/profile/chriskrycho

* PayPal.me/chriskrycho

Contact

* New Rustacean:

* Twitter: @newrustacean

* Email: hello@newrustacean.com

* Chris Krycho

* GitHub: chriskrycho

* Twitter: @chriskrycho]]></itunes:summary>
            <itunes:duration>17:06</itunes:duration>
        </item>
        <item>
            <title>e016: RefCells and code smells</title>
            <link>http://newrustacean.com/show_notes/e016/</link>
            <description><![CDATA[<p>Digging deeper on smart pointers and mutability with <code>Cell</code> and <code>RefCell</code>.
<h2 id="notes">Notes</h2>
<p>What are the <code>Cell</code> and <code>RefCell</code> types, and when should we use them?</p>
<p>Today, we follow up both the detailed discussion of smart pointers in <a href="http://www.newrustacean.com/show_notes/e015/">e015</a> and the closely related discussion in <a href="http://www.newrustacean.com/show_notes/interview/_2/">Interview 2</a> with Raph Levien, and look at two types you need to have a good idea how to deal with if you want to use these smart pointer types more <em>ergonomically</em>—that is, how to use them without feeling like you’re beating your head against a wall!</p>
<h2 id="links">Links</h2>
<ul>
<li>Rust 1.10
<ul>
<li><a href="https://blog.rust-lang.org/2016/07/07/Rust-1.10.html">blog post</a></li>
<li><a href="https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1100-2016-07-07">full release notes</a></li>
<li>cdylib
<ul>
<li>RFC: <a href="https://github.com/rust-lang/rfcs/blob/master/text/1510-rdylib.md">text</a> | <a href="https://github.com/rust-lang/rfcs/pull/1510">discussion</a></li>
<li><a href="https://github.com/rust-lang/rust/pull/33553">implementation</a></li>
</ul></li>
</ul></li>
<li><a href="https://internals.rust-lang.org/t/beta-testing-rustup-rs/3316/144">rustup 0.3.0 release</a></li>
<li><a href="http://www.integer32.com">Integer32</a> (Carol Nichols’ and Jake Goulding’s new Rust consultancy)
<ul>
<li><a href="http://www.integer32.com/2016/07/11/why-rust.html">announcement blog post</a></li>
<li><a href="https://www.reddit.com/r/rust/comments/4sdncw/why_were_starting_a_rust_consultancy/">reddit discussion</a></li>
</ul></li>
<li><a href="https://intellij-rust.github.io">IntelliJ Rust</a>
<ul>
<li><a href="https://www.reddit.com/r/rust/comments/4sbqaq/intellijrust_has_a_website_now/">reddit discussion</a></li>
</ul></li>
<li>Tango: <a href="https://github.com/pnkfelix/tango">source</a> | <a href="https://skillsmatter.com/skillscasts/8372-tango-literate-programming-in-rust">talk</a></li>
<li><code>Cell</code> and <code>RefCell</code>:
<ul>
<li><a href="https://doc.rust-lang.org/book/choosing-your-guarantees.html#cell-types">Cell Types</a> in <em>The Rust Programming Language</em></li>
<li>Standard library:
<ul>
<li><a href="https://doc.rust-lang.org/std/cell/index.html"><code>std::cell</code></a> module docs (detailed explanation, complementary to the book)</li>
<li><a href="https://doc.rust-lang.org/std/cell/struct.Cell.html"><code>Cell&lt;T&gt;</code></a> docs (at <code>std::cell::Cell</code>)</li>
<li><a href="https://doc.rust-lang.org/std/cell/struct.RefCell.html"><code>RefCell&lt;T&gt;</code></a> docs (at <code>stc::cell::RefCell</code>)</li>
</ul></li>
</ul></li>
</ul>
<h2 id="sponsors">Sponsors</h2>
<ul>
<li>Aleksey Pirogov</li>
<li><a href="http://home.red-oxide.org/">Chris Palmer</a></li>
<li><a href="twitter.com/daniel_collin">Daniel Collin</a></li>
<li><a href="https://twitter.com/derekmorr">Derek Morr</a></li>
<li>Doug Reeves</li>
<li>Eric Fulmer</li>
<li>Hamza Sheikh</li>
<li><a href="https://github.com/Limeth">Jakub “Limeth” Hlusička</a></li>
<li>Keith Gray</li>
<li>Lachlan Collins</li>
<li>Leif Arne Storset</li>
<li>Luca Schmid</li>
<li>Micael Bergeron</li>
<li>Michael Clayton</li>
<li><a href="https://pascalhertleif.de/">Pascal Hertleif</a></li>
<li>Ralph Giles (“rillian”)</li>
<li>Ralph “FriarTech” Loizzo</li>
<li>Raph Levien</li>
<li>reddraggone9</li>
<li>Ryan Ollos</li>
<li>Vesa Kaihlavirta</li>
<li><a href="http://willroe.me">William Roe</a></li>
</ul>
<p>(Thanks to the couple people donating who opted out of the reward tier, as well. You know who you are!)</p>
<h3 id="become-a-sponsor">Become a sponsor</h3>
<ul>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li><a href="https://venmo.com/chriskrycho">Venmo</a></li>
<li><a href="https://www.dwolla.com/hub/chriskrycho">Dwolla</a></li>
<li><a href="https://cash.me/$chriskrycho">Cash.me</a></li>
<li><a href="https://flattr.com/profile/chriskrycho">Flattr</a></li>
<li><a href="https://paypal.me/chriskrycho">PayPal.me</a></li>
</ul>
<h2 id="contact">Contact</h2>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul></li>
<li>Chris Krycho
<ul>
<li>GitHub: <a href="https://github.com/chriskrycho">chriskrycho</a></li>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
</ul></li>
</ul>
]]></description>
            <pubDate>Sat, 23 Jul 2016 13:58:33 -0400</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e016.m4a" length="7889277" type="audio/x-m4a"/>
            <guid isPermaLink="false">391443C9-2019-4843-BEB3-46B5140C6256</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:summary><![CDATA[Digging deeper on smart pointers and mutability with `Cell` and `RefCell`.

Notes

What are the Cell and RefCell types, and when should we use them?

Today, we follow up both the detailed discussion of smart pointers in e015 and the closely related discussion in Interview 2 with Raph Levien, and look at two types you need to have a good idea how to deal with if you want to use these smart pointer types more _ergonomically_—that is, how to use them without feeling like you’re beating your head against a wall!


Sponsors

-   Aleksey Pirogov
-   Chris Palmer
-   Daniel Collin
-   Derek Morr
-   Doug Reeves
-   Eric Fulmer
-   Hamza Sheikh
-   Jakub “Limeth” Hlusička
-   Keith Gray
-   Lachlan Collins
-   Leif Arne Storset
-   Luca Schmid
-   Micael Bergeron
-   Michael Clayton
-   Pascal Hertleif
-   Ralph Giles (“rillian”)
-   Ralph “FriarTech” Loizzo
-   Raph Levien
-   reddraggone9
-   Ryan Ollos
-   Vesa Kaihlavirta
-   William Roe

(Thanks to the couple people donating who opted out of the reward tier, as well. You know who you are!)

Become a sponsor

-   Patreon.com/newrustacean
-   Venmo.com/chriskrycho
-   Dwolla.com/hub/chriskrycho
-   Cash.me/$chriskrycho
-   flattr.com/profile/chriskrycho
-   PayPal.me/chriskrycho


Contact

-   New Rustacean:
    -   Twitter: @newrustacean
    -   Email: hello@newrustacean.com
-   Chris Krycho
    -   GitHub: chriskrycho
    -   Twitter: @chriskrycho

]]></itunes:summary>
            <itunes:duration>18:52</itunes:duration>
        </item>
        <item>
            <title>Interview 2::Part 2 – Raph Levien</title>
            <link>http://newrustacean.com/show_notes/interview/_2/part_2/</link>
            <description><![CDATA[<p>Raph Levien on Rust’s current strengths and places it can improve</p>
<h2 id="notes">Notes</h2>
<p>Chris chats with Raph Levien about what inspired him to build a text editor, as well as about where the rough edges in the Rust development story are today, and how we might improve them going forward.</p>
<h2 id="links">Links</h2>
<ul>
<li>Rust/Ruby bridge: Helix
<ul>
<li><a href="http://blog.skylight.io/introducing-helix/">blog post</a></li>
<li><a href="https://github.com/rustbridge/helix">GitHub</a></li>
</ul></li>
<li><a href="https://github.com/rustbridge">Rust Bridge project</a></li>
<li>Ropes
<ul>
<li><a href="https://www.cs.rit.edu/usr/local/pub/jeh/courses/QUARTERS/FP/Labs/CedarRope/rope-paper.pdf">original paper</a></li>
<li><a href="https://github.com/google/xi-editor/tree/master/rust/rope">Rust implementation</a></li>
<li><a href="https://github.com/ivmai/bdwgc/">C++ implementation</a></li>
</ul></li>
<li>Yehuda Katz on Code Newbie
<ul>
<li><a href="http://www.codenewbie.org/podcast/creating-emberjs-part-i">Creating Ember JS - Part I</a></li>
<li><a href="http://www.codenewbie.org/podcast/creating-emberjs-part-ii">Creating Ember JS - Part II</a></li>
</ul></li>
<li><a href="http://www.chriskrycho.com/2016/rust-and-swift-xi.html">Rust and Swift (xi): Hopes for the next generation of systems programming.</a></li>
</ul>
<h2 id="sponsors">Sponsors</h2>
<ul>
<li>Aleksey Pirogov</li>
<li><a href="http://home.red-oxide.org/">Chris Palmer</a></li>
<li><a href="twitter.com/daniel_collin">Daniel Collin</a></li>
<li><a href="https://twitter.com/derekmorr">Derek Morr</a></li>
<li>Doug Reeves</li>
<li>Hamza Sheikh</li>
<li>Keith Gray</li>
<li>Lachlan Collins</li>
<li>Leif Arne Storset</li>
<li>Luca Schmid</li>
<li>Micael Bergeron</li>
<li><a href="https://pascalhertleif.de/">Pascal Hertleif</a></li>
<li>Ralph Giles (“rillian”)</li>
<li>Ralph “FriarTech” Loizzo</li>
<li>Raph Levien</li>
<li>reddraggone9</li>
<li>Ryan Ollos</li>
<li>Vesa Kaihlavirta</li>
<li><a href="http://willroe.me">William Roe</a></li>
</ul>
<p>(Thanks to the couple people donating who opted out of the reward tier, as well. You know who you are!)</p>
<h3 id="become-a-sponsor">Become a sponsor</h3>
<ul>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li><a href="https://venmo.com/chriskrycho">Venmo</a></li>
<li><a href="https://www.dwolla.com/hub/chriskrycho">Dwolla</a></li>
<li><a href="https://cash.me/$chriskrycho">Cash.me</a></li>
<li><a href="https://flattr.com/profile/chriskrycho">Flattr</a></li>
<li><a href="https://paypal.me/chriskrycho">PayPal.me</a></li>
</ul>
<h2 id="contact">Contact</h2>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul></li>
<li>Chris Krycho
<ul>
<li>GitHub: <a href="https://github.com/chriskrycho">chriskrycho</a></li>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
</ul></li>
</ul>]]></description>
            <pubDate>Mon, 04 Jul 2016 19:35:00 -0400</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/interview_2_part_2.m4a" length="7563611" type="audio/x-m4a"/>
            <guid isPermaLink="false">E2C1612A-178F-4AAF-8581-FC589BC3345E</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:summary><![CDATA[Raph Levien on Rust’s current strengths and places it can improve


Notes

Chris chats with Raph Levien about what inspired him to build a text editor, as well as about where the rough edges in the Rust development story are today, and how we might improve them going forward.


Sponsors

-   Aleksey Pirogov
-   Chris Palmer
-   Daniel Collin
-   Derek Morr
-   Doug Reeves
-   Hamza Sheikh
-   Keith Gray
-   Lachlan Collins
-   Leif Arne Storset
-   Luca Schmid
-   Micael Bergeron
-   Pascal Hertleif
-   Ralph Giles (“rillian”)
-   Ralph “FriarTech” Loizzo
-   Raph Levien
-   reddraggone9
-   Ryan Ollos
-   Vesa Kaihlavirta
-   William Roe

(Thanks to the couple people donating who opted out of the reward tier, as well. You know who you are!)

Become a sponsor

-   Patreon.com/newrustacean
-   Venmo.com/chriskrycho
-   Dwolla.com/hub/chriskrycho
-   Cash.me/$chriskrycho
-   flattr.com/profile/chriskrycho
-   PayPal.me/chriskrycho


Contact

-   New Rustacean:
    -   Twitter: @newrustacean
    -   Email: hello@newrustacean.com
-   Chris Krycho
    -   GitHub: chriskrycho
    -   Twitter: @chriskrycho]]></itunes:summary>
            <itunes:duration>19:33</itunes:duration>
        </item>
        <item>
            <title>Interview 2::Part 1 – Raph Levien</title>
            <link>http://newrustacean.com/show_notes/interview/_2/part_1/</link>
            <description><![CDATA[<p>Raph Levien on using Rust to build the Xi editor</p>
<h2 id="notes">Notes</h2>
<p>Chris chats with Raph Levien about his background in software development, what attracted him to Rust, and how he’s using Rust to build the Xi Editor, a project which aims to be the fastest text editor out there, with native user interfaces and a Rust text engine.</p>
<h2 id="links">Links</h2>
<ul>
<li>Past work:
<ul>
<li><a href="http://www.gimp.org">GIMP</a></li>
<li><a href="http://gtk.org">GTK</a></li>
<li><a href="http://www.ghostscript.com">GhostScript</a></li>
<li><a href="https://fonts.google.com">Google Web Fonts</a></li>
</ul></li>
<li>Current projects:
<ul>
<li><a href="https://github.com/google/font-rs">font-rs</a></li>
<li><a href="https://github.com/google/pulldown-cmark">pulldown-cmark</a></li>
<li><a href="https://github.com/google/xi-editor">Xi Editor</a></li>
</ul></li>
<li><a href="https://en.wikipedia.org/wiki/Fuzz_testing">fuzz testing</a></li>
<li><a href="http://developers.redhat.com/blog/2014/12/02/address-and-thread-sanitizers-gcc/">sanitizers</a></li>
<li><a href="https://www.freetype.org">FreeType</a></li>
<li><a href="https://www.freedesktop.org/wiki/Software/HarfBuzz/">HarfBuzz</a></li>
<li><a href="http://site.icu-project.org">ICU</a></li>
<li>Ropes
<ul>
<li><a href="https://en.wikipedia.org/wiki/Rope_%28data_structure%29">Wikipedia summary</a></li>
<li><a href="http://citeseer.ist.psu.edu/viewdoc/download?doi=10.1.1.14.9450&amp;rep=rep1&amp;type=pdf">original paper</a></li>
</ul></li>
<li><a href="http://stackoverflow.com/questions/2307283/what-does-olog-n-mean-exactly">“log n operation”</a>, or <em>O(log n)</em>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Big_O_notation">Big O notation</a></li>
</ul></li>
<li>Rust:
<ul>
<li>[<code>Arc</code>]</li>
<li>[<code>RefCell</code>]</li>
<li>[<code>Borrow</code>]</li>
<li>[<code>AsRef</code>]</li>
</ul></li>
<li>Rust libraries
<ul>
<li>[Crossbeam]</li>
<li>[Rayon]</li>
</ul></li>
<li><p><a href="https://en.wikipedia.org/wiki/Unix_philosophy">Unix philosophy</a></p>
<blockquote>
<p>The Unix philosophy emphasizes building simple, short, clear, modular, and extensible code that can be easily maintained and repurposed by developers other than its creators. The Unix philosophy favors composability as opposed to monolithic design.</p>
</blockquote></li>
</ul>
<h2 id="sponsors">Sponsors</h2>
<ul>
<li>Aleksey Pirogov</li>
<li><a href="http://home.red-oxide.org/">Chris Palmer</a></li>
<li><a href="twitter.com/daniel_collin">Daniel Collin</a></li>
<li><a href="https://twitter.com/derekmorr">Derek Morr</a></li>
<li>Doug Reeves</li>
<li>Hamza Sheikh</li>
<li>Lachlan Collins</li>
<li>Leif Arne Storset</li>
<li>Luca Schmid</li>
<li>Micael Bergeron</li>
<li><a href="https://pascalhertleif.de/">Pascal Hertleif</a></li>
<li>Ralph Giles (“rillian”)</li>
<li>Ralph “FriarTech” Loizzo</li>
<li>Raph Levien</li>
<li>reddraggone9</li>
<li>Ryan Ollos</li>
<li>Vesa Kaihlavirta</li>
<li><a href="http://willroe.me">William Roe</a></li>
</ul>
<p>(Thanks to the couple people donating who opted out of the reward tier, as well. You know who you are!)</p>
<h3 id="become-a-sponsor">Become a sponsor</h3>
<ul>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li><a href="https://venmo.com/chriskrycho">Venmo</a></li>
<li><a href="https://www.dwolla.com/hub/chriskrycho">Dwolla</a></li>
<li><a href="https://cash.me/$chriskrycho">Cash.me</a></li>
<li><a href="https://flattr.com/profile/chriskrycho">Flattr</a></li>
<li><a href="https://paypal.me/chriskrycho">PayPal.me</a></li>
</ul>
<h2 id="contact">Contact</h2>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul></li>
<li>Chris Krycho
<ul>
<li>GitHub: <a href="https://github.com/chriskrycho">chriskrycho</a></li>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
</ul></li>
</ul>
]]></description>
            <pubDate>Fri, 24 Jun 2016 21:26:51 -0400</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/interview_2_part_1.m4a" length="10807526" type="audio/x-m4a"/>
            <guid isPermaLink="false">E585DC9C-567B-4902-B722-AF4D24DCA256</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:summary><![CDATA[Raph Levien on using Rust to build the Xi editor


Notes

Chris chats with Raph Levien about his background in software
development, what attracted him to Rust, and how he’s using Rust to
build the Xi Editor, a project which aims to be the fastest text editor
out there, with native user interfaces and a Rust text engine.


Sponsors

-   Aleksey Pirogov
-   Chris Palmer
-   Daniel Collin
-   Derek Morr
-   Doug Reeves
-   Hamza Sheikh
-   Lachlan Collins
-   Leif Arne Storset
-   Luca Schmid
-   Micael Bergeron
-   Pascal Hertleif
-   Ralph Giles (“rillian”)
-   Ralph “FriarTech” Loizzo
-   Raph Levien
-   reddraggone9
-   Ryan Ollos
-   Vesa Kaihlavirta
-   William Roe

(Thanks to the couple people donating who opted out of the reward tier,
as well. You know who you are!)

Become a sponsor

-   Patreon.com/newrustacean
-   Venmo.com/chriskrycho
-   Dwolla.com/hub/chriskrycho
-   Cash.me/$chriskrycho
-   flattr.com/profile/chriskrycho
-   PayPal.me/chriskrycho


Contact

-   New Rustacean:
    -   Twitter: @newrustacean
    -   Email: hello@newrustacean.com
-   Chris Krycho
    -   GitHub: chriskrycho
    -   Twitter: @chriskrycho]]></itunes:summary>
            <itunes:duration>28:17</itunes:duration>
        </item>
        <item>
            <title>e015: Not dumb pointers</title>
            <link>http://newrustacean.com/show_notes/e015/</link>
            <description><![CDATA[<p><code>Box</code>, <code>String</code>, <code>Vec</code>, <code>Rc</code>, and <code>Arc</code> have this in common: they’re not dumb.</p>
<p>This episode, we take a close look at smart pointer types—from a few we’ve already talked about, like <code>Box</code>, <code>Vec</code>, and <code>String</code>, to some new ones, like <code>Rc</code> and <code>Arc</code>.</p>
<ul>
<li>What smart pointers are, and what makes them ‘smart’.</li>
<li>Why we want or need smart pointers.</li>
<li>A bit about <code>Box</code>.</li>
<li>A lot more about <code>Rc</code> and <code>Arc</code>.</li>
</ul>
<h2 id="links">Links</h2>
<ul>
<li><a href="http://rustconf.com">RustConf</a></li>
<li><a href="http://www.rust-belt-rust.com">Rust Belt Rust Conference</a>
<ul>
<li><a href="http://www.rust-belt-rust.com/sessions/">sessions</a></li>
</ul></li>
<li><a href="https://soundcloud.com/posix4e/sets/rustyradio">Rusty Radio</a>
<ul>
<li><a href="http://feeds.soundcloud.com/users/soundcloud:users:1287419/sounds.rss">feed</a></li>
</ul></li>
<li><a href="http://exercism.io/languages/rust">Rust Exercism track</a>
<ul>
<li><a href="http://exercism.io/languages">All exercism language tracks</a></li>
</ul></li>
</ul>
<h2 id="sponsors">Sponsors</h2>
<ul>
<li>Aleksey Pirogov</li>
<li><a href="http://home.red-oxide.org/">Chris Palmer</a></li>
<li><a href="twitter.com/daniel_collin">Daniel Collin</a></li>
<li><a href="https://twitter.com/derekmorr">Derek Morr</a></li>
<li>Doug Reeves</li>
<li>Hamza Sheikh</li>
<li>Lachlan Collins</li>
<li>Leif Arne Storset</li>
<li>Luca Schmid</li>
<li>Micael Bergeron</li>
<li><a href="https://pascalhertleif.de/">Pascal Hertleif</a></li>
<li>Ralph Giles (“rillian”)</li>
<li>Ralph “FriarTech” Loizzo</li>
<li>Raph Levien</li>
<li>reddraggone9</li>
<li>Ryan Ollos</li>
<li>Vesa Kaihlavirta</li>
<li><a href="http://willroe.me">William Roe</a></li>
</ul>
<p>(Thanks to the couple people donating who opted out of the reward tier, as well. You know who you are!)</p>
<h3 id="become-a-sponsor">Become a sponsor</h3>
<ul>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li><a href="https://venmo.com/chriskrycho">Venmo</a></li>
<li><a href="https://www.dwolla.com/hub/chriskrycho">Dwolla</a></li>
<li><a href="https://cash.me/$chriskrycho">Cash.me</a></li>
<li><a href="https://flattr.com/profile/chriskrycho">Flattr</a></li>
<li><a href="https://paypal.me/chriskrycho">PayPal.me</a></li>
</ul>
<h2 id="contact">Contact</h2>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul></li>
<li>Chris Krycho
<ul>
<li>GitHub: <a href="https://github.com/chriskrycho">chriskrycho</a></li>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
</ul></li>
</ul>
]]></description>
            <pubDate>Fri, 17 Jun 2016 20:07:22 -0400</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e015.m4a" length="8544080" type="audio/x-m4a"/>
            <guid isPermaLink="false">DE71BD86-2409-4D8A-8A5A-797751339FC1</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:summary><![CDATA[Box, String, Vec, Rc, and Arc have this in common: they’re not dumb.

This episode, we take a close look at smart pointer types—from a few we’ve already talked about, like Box, Vec, and String, to some new ones, like Rc and Arc.

-   What smart pointers are, and what makes them ‘smart’.
-   Why we want or need smart pointers.
-   A bit about Box.
-   A lot more about Rc and Arc.


Sponsors

-   Aleksey Pirogov
-   Chris Palmer
-   Daniel Collin
-   Derek Morr
-   Doug Reeves
-   Hamza Sheikh
-   Lachlan Collins
-   Leif Arne Storset
-   Luca Schmid
-   Micael Bergeron
-   Pascal Hertleif
-   Ralph Giles (“rillian”)
-   Ralph “FriarTech” Loizzo
-   Raph Levien
-   reddraggone9
-   Ryan Ollos
-   Vesa Kaihlavirta
-   William Roe

(Thanks to the couple people donating who opted out of the reward tier, as well. You know who you are!)


Contact

-   New Rustacean:
    -   Twitter: @newrustacean
    -   Email: hello@newrustacean.com
-   Chris Krycho
    -   GitHub: chriskrycho
    -   Twitter: @chriskrycho

]]></itunes:summary>
            <itunes:duration>20:03</itunes:duration>
        </item>
        <item>
            <title>News 1: One year and counting</title>
            <link>http://newrustacean.com/show_notes/news/_1/</link>
            <description><![CDATA[<p>A year in, Rust is changing fast but still stable.</p>
<h2 id="links">Links</h2>
<ul>
<li>Rust 1.9
<ul>
<li><a href="http://blog.rust-lang.org/2016/05/26/Rust-1.9.html">blog post</a></li>
<li><a href="https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-190-2016-05-26">release notes</a></li>
</ul></li>
<li><a href="http://llvm.org">LLVM</a>
<ul>
<li><a href="http://llvm.org/ProjectsWithLLVM/">Projects built with LLVM</a></li>
<li><a href="https://en.wikipedia.org/wiki/LLVM">Wikipedia discussion</a></li>
</ul></li>
<li>MIR
<ul>
<li><a href="http://blog.rust-lang.org/2016/04/19/MIR.html">blog post</a></li>
<li><a href="https://play.rust-lang.org">play.rust-lang.org</a> – note the MIR button!</li>
<li>Two enhancements enabled by MIR:
<ul>
<li>Non-zeroing dynamic drop
<ul>
<li><a href="https://github.com/rust-lang/rfcs/blob/master/text/0320-nonzeroing-dynamic-drop.md">RFC</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/320">pull request and discussion</a></li>
</ul></li>
<li><a href="https://github.com/rust-lang/rfcs/issues/811">Issue 811: “Non-lexical borrow scopes and better treatment of nested method calls”</a></li>
</ul></li>
</ul></li>
<li><a href="http://blog.rust-lang.org/2016/05/05/cargo-pillars.html">Cargo blog post</a></li>
<li><code>rustup</code>
<ul>
<li><a href="http://blog.rust-lang.org/2016/05/13/rustup.html">blog post</a></li>
<li><a href="https://www.rustup.rs">install from rustup.rs</a></li>
</ul></li>
</ul>
<h2 id="sponsors">Sponsors</h2>
<ul>
<li>Aleksey Pirogov</li>
<li><a href="http://home.red-oxide.org/">Chris Palmer</a></li>
<li><a href="https://twitter.com/daniel_collin">Daniel Collin</a></li>
<li><a href="https://twitter.com/derekmorr">Derek Morr</a></li>
<li>Hamza Sheikh</li>
<li>Lachlan Collins</li>
<li>Leif Arne Storset</li>
<li>Luca Schmid</li>
<li>Micael Bergeron</li>
<li><a href="https://pascalhertleif.de/">Pascal Hertleif</a></li>
<li>Ralph Giles (“rillian”)</li>
<li>Ralph “FriarTech” Loizzo</li>
<li>reddraggone9</li>
<li>Ryan Ollos</li>
<li>Vesa Kaihlavirta</li>
<li><a href="http://willroe.me">William Roe</a></li>
</ul>
<p>(Thanks to the couple people donating who opted out of the reward tier, as well. You know who you are!)</p>
<h3 id="become-a-sponsor">Become a sponsor</h3>
<ul>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li><a href="https://venmo.com/chriskrycho">Venmo</a></li>
<li><a href="https://www.dwolla.com/hub/chriskrycho">Dwolla</a></li>
<li><a href="https://cash.me/$chriskrycho">Cash.me</a></li>
<li><a href="https://flattr.com/profile/chriskrycho">Flattr</a></li>
<li><a href="https://paypal.me/chriskrycho">PayPal.me</a></li>
</ul>
<h2 id="contact">Contact</h2>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul></li>
<li>Chris Krycho
<ul>
<li>GitHub: <a href="https://github.com/chriskrycho">chriskrycho</a></li>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
</ul></li>
</ul>
]]></description>
            <pubDate>Tue, 31 May 2016 14:13:25 -0400</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/news_1.m4a" length="10373097" type="audio/x-m4a"/>
            <guid isPermaLink="false">A8D6E44A-007D-4D36-9442-AA30722DF454</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:summary><![CDATA[A year in, Rust is changing fast but still stable.


Sponsors

* Aleksey Pirogue

* Chris Palmer

* Daniel Collin

* Derek Morr

* Hamza Sheikh

* Lachlan Collins

* Leif Arne Storset

* Luca Schmid

* Micael Bergeron

* Pascal Hertleif

* Ralph Giles (“gillian”)

* Ralph “FriarTech” Loizzo

* reddraggone9

* Ryan Oleos

* Vesa Kaihlavirta

* William Roe

(Thanks to the couple people donating who opted out of the reward tier, as well. You know who you are!)


Become a sponsor

* Patreon.com/newrustacean

* Venmo.com/chriskrycho

* Dwolla.com/hub/chriskrycho

* Cash.me/$chriskrycho

* Flattr.com/profile/chriskrycho

* PayPal.me/chriskrycho

Contact

* New Rustacean:

* Twitter: @newrustacean

* Email: hello@newrustacean.com

* Chris Krycho

* GitHub: chriskrycho

* Twitter: @chriskrycho]]></itunes:summary>
            <itunes:duration>26:16</itunes:duration>
        </item>
        <item>
            <title>Bonus 5: Better than open-source contributions</title>
            <link>http://newrustacean.com/show_notes/bonus/_5/</link>
            <description><![CDATA[<p>Some things matter more than contributing to open-source software in your free time. A <em>lot</em> more.</p>

It’s trendy to ask for open-source work as evidence of your interest in tech and commitment to software development. Trendy and <em>completely wrong</em>. Companies should not demand open-source contributions from their employees, and beyond that, should learn to recognize that <em>profit</em> is not the most valuable thing in the world. People are.
<br />
<h2 id="links">Links</h2>
<ul>
<li><a href="https://github.com/google/xi-editor">Xi editor</a></li>
<li><a href="http://blog.rust-lang.org/2016/05/09/survey.html">Rust survey</a></li>
<li>Expecting people to do open-source work
<ul>
<li><a href="http://pythontesting.net/podcast/testing-in-startups-joe-stump-sprintly">Python Testing 18: Testing in Startups and Hiring Software Engineers with Joe Stump</a></li>
<li><a href="https://twitter.com/joestump/status/723635220256190464">Tweet about it by Joe Stump</a></li>
</ul>
</li>
</ul>
<h2 id="sponsors">Sponsors</h2>
<ul>
<li>Aleksey Pirogov</li>
<li><a href="http://home.red-oxide.org/">Chris Palmer</a></li>
<li><a href="https://twitter.com/daniel_collin">Daniel Collin</a></li>
<li><a href="https://twitter.com/derekmorr">Derek Morr</a></li>
<li>Hamza Sheikh</li>
<li>Lachlan Collins</li>
<li>Leif Arne Storset</li>
<li>Luca Schmid</li>
<li>Micael Bergeron</li>
<li><a href="https://pascalhertleif.de/">Pascal Hertleif</a></li>
<li>Ralph Giles (“rillian”)</li>
<li>Ralph “FriarTech” Loizzo</li>
<li>reddraggone9</li>
<li>Ryan Ollos</li>
<li>Vesa Kaihlavirta</li>
<li><a href="http://willroe.me">William Roe</a></li>
</ul>

(Thanks to the couple people donating who opted out of the reward tier, as well. You know who you are!)
<br />
<h3 id="become-a-sponsor">Become a sponsor</h3>
<ul>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li><a href="https://venmo.com/chriskrycho">Venmo</a></li>
<li><a href="https://www.dwolla.com/hub/chriskrycho">Dwolla</a></li>
<li><a href="https://cash.me/$chriskrycho">Cash.me</a></li>
<li><a href="https://flattr.com/profile/chriskrycho">Flattr</a></li>
<li><a href="https://paypal.me/chriskrycho">PayPal.me</a></li>
</ul>
<h2 id="contact">Contact</h2>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul>
</li>
<li>Chris Krycho
<ul>
<li>GitHub: <a href="https://github.com/chriskrycho">chriskrycho</a></li>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
</ul>
</li>
</ul>]]></description>
            <pubDate>Mon, 09 May 2016 21:47:24 -0400</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/bonus_5.m4a" length="4559498" type="audio/x-m4a"/>
            <guid isPermaLink="false">B75ECD4A-1A69-4BF1-A5D0-8F860A3DDFF4</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:summary><![CDATA[Some things matter more than contributing to open-source software in your free time. A lot more.

It’s trendy to ask for open-source work as evidence of your interest in tech and commitment to software development. Trendy and completely wrong. Companies should not demand open-source contributions from their employees, and beyond that, should learn to recognize that profit is not the most valuable thing in the world. People are.

Sponsors

* Aleksey Pirogue

* Chris Palmer

* Daniel Collin

* Derek Morr

* Hamza Sheikh

* Lachlan Collins

* Leif Arne Storset

* Luca Schmid

* Micael Bergeron

* Pascal Hertleif

* Ralph Giles (‚Äúrillian‚Äù)

* Ralph ‚ÄúFriarTech‚Äù Loizzo

* reddraggone9

* Ryan Oleos

* Vesa Kaihlavirta

* William Roe

(Thanks to the couple people donating who opted out of the reward tier, as well. You know who you are!)

Become a sponsor

* Patreon.com/newrustacean

* Venmo.com/chriskrycho

* Dwolla.com/hub/chriskrycho

* Cash.me/$chriskrycho

* Flattr.com/profile/chriskrycho

* PayPal.me/chriskrycho

Contact

* New Rustacean: @newrustacean or hello@newrustacean.com

* Chris Krycho: github.com/chriskrycho, @chriskrycho]]></itunes:summary>
            <itunes:duration>11:07</itunes:duration>
        </item>
        <item>
            <title>e014: Stringing things along</title>
            <link>http://newrustacean.com/show_notes/e014/</link>
            <description><![CDATA[<p><code>Strings</code> <code>&amp;str</code>s and <code>Vec</code>s and slices (and Unicode) – oh, my!</p>
<h2 id="notes">Notes</h2>
<p>This episode, I take a deep dive on strings in Rust, looking at the differences between <code>String</code> and <code>&amp;str</code>, discussing Unicode a bit, and then expanding the discussion to think about how these types relate to the types they’re built on (like <code>Vec</code>).</p>
<h2 id="links">Links</h2>
<ul>
<li>Strings:
<ul>
<li><a href="https://doc.rust-lang.org/book/strings.html">The Rust Book</a></li>
<li><a href="http://rustbyexample.com/std/str.html">Rust by Example</a></li>
<li><code>str</code> docs:
<ul>
<li><a href="http://doc.rust-lang.org/std/str/">module</a></li>
<li><a href="http://doc.rust-lang.org/std/primitive.str.html">primitive type</a></li>
</ul></li>
<li><code>String</code>
<ul>
<li><a href="http://doc.rust-lang.org/std/string/index.html">module</a></li>
<li><a href="http://doc.rust-lang.org/std/string/struct.String.html">type definition</a></li>
</ul></li>
</ul></li>
<li>Dereferencing
<ul>
<li><a href="http://doc.rust-lang.org/book/deref-coercions.html">coercions</a></li>
<li><a href="http://doc.rust-lang.org/std/ops/trait.Deref.html"><code>std::ops::Deref</code></a></li>
</ul></li>
</ul>
<h2 id="sponsors">Sponsors</h2>
<ul>
<li>Aleksey Pirogov</li>
<li><a href="http://home.red-oxide.org/">Chris Palmer</a></li>
<li><a href="https://twitter.com/derekmorr">Derek Morr</a></li>
<li>Hamza Sheikh</li>
<li>Lachlan Collins</li>
<li>Leif Arne Storset</li>
<li>Luca Schmid</li>
<li>Micael Bergeron</li>
<li><a href="https://pascalhertleif.de/">Pascal Hertleif</a></li>
<li>Ralph Giles (“rillian”)</li>
<li>Ralph “FriarTech” Loizzo</li>
<li>reddraggone9</li>
<li>Ryan Ollos</li>
<li>Vesa Kaihlavirta</li>
<li><a href="http://willroe.me">William Roe</a></li>
</ul>
<p>(Thanks to the couple people donating who opted out of the reward tier, as well. You know who you are!)</p>
<h3 id="become-a-sponsor">Become a sponsor</h3>
<ul>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li><a href="https://venmo.com/chriskrycho">Venmo</a></li>
<li><a href="https://www.dwolla.com/hub/chriskrycho">Dwolla</a></li>
<li><a href="https://cash.me/$chriskrycho">Cash.me</a></li>
<li><a href="https://flattr.com/profile/chriskrycho">Flattr</a></li>
</ul>
<h2 id="contact">Contact</h2>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul></li>
<li>Chris Krycho
<ul>
<li>GitHub: <a href="https://github.com/chriskrycho">chriskrycho</a></li>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
</ul></li>
</ul>]]></description>
            <pubDate>Mon, 25 Apr 2016 22:16:03 -0400</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e014.m4a" length="7703410" type="audio/x-m4a"/>
            <guid isPermaLink="false">50D3DAF8-7B5C-4B19-A6DE-E2CFD21F075F</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:summary><![CDATA[Strings &strs and Vecs and slices (and Unicode) – oh, my!


Notes

This episode, I take a deep dive on strings in Rust, looking at the differences between String and &str, discussing Unicode a bit, and then expanding the discussion to think about how these types relate to the types they’re built on (like Vec).


Links

-   Strings:
    -   The Rust Book
    -   Rust by Example
    -   str docs:
        -   module
        -   primitive type
    -   String
        -   module
        -   type definition
-   Dereferencing
    -   coercions
    -   std::ops::Deref


Sponsors

-   Aleksey Pirogov
-   Chris Palmer
-   Derek Morr
-   Hamza Sheikh
-   Lachlan Collins
-   Leif Arne Storset
-   Luca Schmid
-   Micael Bergeron
-   Pascal Hertleif
-   Ralph Giles (“rillian”)
-   Ralph “FriarTech” Loizzo
-   reddraggone9
-   Ryan Ollos
-   Vesa Kaihlavirta
-   William Roe

(Thanks to the couple people donating who opted out of the reward tier, as well. You know who you are!)

Become a sponsor

-   Patreon.com/chriskrycho
-   Venmo.com/chriskrycho
-   Dwolla.com/hub/chriskrycho
-   Cash.me/$chriskrycho
-   Flattr.com/profile/chriskrycho


Contact

-   New Rustacean:
    -   Twitter: @newrustacean
    -   Email: hello@newrustacean.com
-   Chris Krycho
    -   GitHub: chriskrycho
    -   Twitter: @chriskrycho]]></itunes:summary>
            <itunes:duration>18:58</itunes:duration>
        </item>
        <item>
            <title>Bonus 4: We can have nice things</title>
            <link>http://newrustacean.com/show_notes/bonus/_4/</link>
            <description><![CDATA[<p>Just how good Rust is, and how you can learn it even if you’re busy.</p>
<h2 id="notes">Notes</h2>
<p>Sometimes life goes crazy and I don’t have time to do all the technical writing required for a full episode, but I can’t get Rust off my mind, so I record an episode like this one. Where I talk a bit about how versatile Rust is and suggest some surprising ways you might be able to use it.</p>
<h2 id="links">Links</h2>
<ul>
<li><a href="http://blog.rust-lang.org/2016/04/14/Rust-1.8.html">Rust 1.8</a> blog post</li>
<li><a href="http://fsharp.github.io/FAKE/">Fake</a> build tool in F♯</li>
<li><a href="https://news.ycombinator.com/item?id=11498426">HackerNews</a> on Rust 1.8
<ul>
<li><a href="https://news.ycombinator.com/item?id=11498608">Someone using it for personal projects</a></li>
<li><a href="https://news.ycombinator.com/item?id=11499747">Using it in place of scripting languages</a></li>
</ul></li>
<li><a href="https://twitter.com/jdub/status/720801192884867073">“Feels like Python, runs like C”</a></li>
</ul>
<h2 id="sponsors">Sponsors</h2>
<ul>
<li>Aleksey Pirogov</li>
<li><a href="http://home.red-oxide.org/">Chris Palmer</a></li>
<li><a href="https://twitter.com/derekmorr">Derek Morr</a></li>
<li>Hamza Sheikh</li>
<li>Lachlan Collins</li>
<li>Leif Arne Storset</li>
<li>Luca Schmid</li>
<li>Micael Bergeron</li>
<li><a href="https://pascalhertleif.de/">Pascal Hertleif</a></li>
<li>Ralph Giles (“rillian”)</li>
<li>Ralph “FriarTech” Loizzo</li>
<li>reddraggone9</li>
<li>Ryan Ollos</li>
<li>Vesa Kaihlavirta</li>
<li><a href="http://willroe.me">William Roe</a></li>
</ul>
<p>(Thanks to the couple people donating who opted out of the reward tier, as well. You know who you are!)</p>
<h3 id="become-a-sponsor">Become a sponsor</h3>
<ul>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li><a href="https://venmo.com/chriskrycho">Venmo</a></li>
<li><a href="https://www.dwolla.com/hub/chriskrycho">Dwolla</a></li>
<li><a href="https://cash.me/$chriskrycho">Cash.me</a></li>
</ul>
<h2 id="contact">Contact</h2>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul></li>
<li>Chris Krycho
<ul>
<li>GitHub: <a href="https://github.com/chriskrycho">chriskrycho</a></li>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
</ul></li>
</ul>]]></description>
            <pubDate>Tue, 19 Apr 2016 07:50:00 -0400</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/bonus_4.m4a" length="4195741" type="audio/x-m4a"/>
            <guid isPermaLink="false">38DF55F2-94FB-4CA0-8212-9C4D2897167F</guid>
            <itunes:author>Just how good Rust is, and how you can learn it even if you’re busy.</itunes:author>
            <itunes:summary><![CDATA[Just how good Rust is, and how you can learn it even if you’re busy.


Notes

Sometimes life goes crazy and I don’t have time to do all the technical writing required for a full episode, but I can’t get Rust off my mind, so I record an episode like this one. Where I talk a bit about how versatile Rust is and suggest some surprising ways you might be able to use it.


Sponsors

* Aleksey Pirogue

* Chris Palmer

* Derek Morr

* Hamza Sheikh

* Lachlan Collins

* Leif Arne Storset

* Luca Schmid

* Micael Bergeron

* Pascal Hertleif

* Ralph Giles (“gillian”)

* Ralph “FriarTech” Loizzo

* reddraggone9

* Ryan Oleos

* Vesa Kaihlavirta

* William Roe

(Thanks to the couple people donating who opted out of the reward tier, as well. You know who you are!)


Become a sponsor

* Patreon

* Venom

* Dwolla

* Cash.me


Contact

* New Rustacean:

* Twitter: @newrustacean

* Email: hello@newrustacean.com

* Chris Krycho

* GitHub: chriskrycho

* Twitter: @chriskrycho]]></itunes:summary>
            <itunes:duration>10:17</itunes:duration>
        </item>
        <item>
            <title>e013: Staying alive</title>
            <link>http://newrustacean.com/show_notes/e013/</link>
            <description><![CDATA[<p>Reasoning about and using lifetimes in Rust (and why we need them)</p>
<h2>Notes</h2>
<p>Lifetimes are our way of reasoning about how long a given piece of data is<br />
available and safe to use in Rust. The reason we don't have the dangling<br />
pointer problem is that we <em>do</em> have lifetimes instead. They're not magic,<br />
they're just a bit of semantics and syntax that let us specify the rules for<br />
how long any given item lives, and how long references to data must be valid.</p>
<h2>Links</h2>
<ul>
<li><a href="http://diesel.rs">Diesel</a>
<ul>
<li><a href="http://diesel.rs/guides/getting-started/">Tutorial</a></li>
<li><a href="http://docs.diesel.rs/diesel/index.html">API docs</a></li>
</ul>
</li>
<li><a href="https://github.com/carllerche/mio">Mio, an I/O library</a>
<ul>
<li><a href="https://github.com/carllerche/mio/blob/getting-started/doc/getting-started.md">Getting Started</a></li>
<li><a href="http://rustdoc.s3-website-us-east-1.amazonaws.com/mio/master/mio/">API Docs</a></li>
</ul>
</li>
</ul>
<table><thead><tr></tr></thead><tbody><tr></tr></tbody></table><h2>Sponsors</h2>
<ul>
<li>Aleksey Pirogov</li>
<li><a href="http://home.red-oxide.org/">Chris Palmer</a></li>
<li><a href="https://twitter.com/derekmorr">Derek Morr</a></li>
<li>Hamza Sheikh</li>
<li>Lachlan Collins</li>
<li>Leif Arne Storset</li>
<li>Luca Schmid</li>
<li>Micael Bergeron</li>
<li><a href="https://pascalhertleif.de/">Pascal Hertleif</a></li>
<li>Ralph Giles ("rillian")</li>
<li>Ralph "FriarTech" Loizzo</li>
<li>reddraggone9</li>
<li>Ryan Ollos</li>
<li>Vesa Kaihlavirta</li>
<li><a href="http://willroe.me">William Roe</a></li>
</ul>
<p>(Thanks to the couple people donating who opted out of the reward tier, as<br />
well. You know who you are!)</p>
<h3>Become a sponsor</h3>
<ul>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li><a href="https://venmo.com/chriskrycho">Venmo</a></li>
<li><a href="https://www.dwolla.com/hub/chriskrycho">Dwolla</a></li>
<li><a href="https://cash.me/$chriskrycho">Cash.me</a></li>
</ul>
<h2>Contact</h2>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul>
</li>
<li>Chris Krycho
<ul>
<li>GitHub: <a href="https://github.com/chriskrycho">chriskrycho</a></li>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
</ul>
</li>
</ul>
]]></description>
            <pubDate>Mon, 04 Apr 2016 19:52:21 -0400</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e013.m4a" length="7121753" type="audio/x-m4a"/>
            <guid isPermaLink="false">20F0A4EE-7D88-4C90-8BA5-7D28FB8AF0AD</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:summary><![CDATA[Reasoning about and using lifetimes in Rust (and why we need them)


Notes

Lifetimes are our way of reasoning about how long a given piece of data is
available and safe to use in Rust. The reason we don't have the dangling
pointer problem is that we do have lifetimes instead. They're not magic,
they're just a bit of semantics and syntax that let us specify the rules for
how long any given item lives, and how long references to data must be valid.


Sponsors

* Aleksey Pirogue

* Chris Palmer

* Derek Morr

* Hamza Sheikh

* Lachlan Collins

* Leif Arne Storset

* Luca Schmid

* Micael Bergeron

* Pascal Hertleif

* Ralph Giles ("gillian")

* Ralph "FriarTech" Loizzo

* reddraggone9

* Ryan Oleos

* Vesa Kaihlavirta

* William Roe

(Thanks to the couple people donating who opted out of the reward tier, as
well. You know who you are!)


Become a sponsor

* Patreon.com/newrustacean

* Venmo.com/chriskrycho

* Dwolla.com/hub/chriskrycho

* Cash.me/$chriskrycho


Contact

* New Rustacean:

* Twitter: @newrustacean

* Email: hello@newrustacean.com


* Chris Krycho

* GitHub: chriskrycho

* Twitter: @chriskrycho]]></itunes:summary>
            <itunes:duration>17:40</itunes:duration>
        </item>
        <item>
            <title>e012: I'm not familiar with that expression</title>
            <link>http://newrustacean.com/show_notes/e012/</link>
            <description><![CDATA[<p>What it means to be an expression-oriented language, and how that works out in Rust.</p>
<h2 id="notes">Notes</h2>
<p>Rust is an <em>expression-oriented</em> language. What does that mean, and how does it play out in Rust? We look at <code>if</code> and <code>match</code> blocks, discuss looping constructs, and examine functions, and then widen out to discuss how having an expression-oriented language can change the way we think about programming.</p>
<h2 id="links">Links</h2>
<ul>
<li><a href="http://www.redox-os.org">Redox</a></li>
<li><a href="https://groups.google.com/forum/#!topic/mozilla.dev.servo/dcrNW6389g4">Servo alpha announcement</a></li>
<li><a href="https://air.mozilla.org/bay-area-rust-meetup-february-2016/#@25m50s">WebRender</a></li>
<li><a href="http://www.wired.com/2016/03/epic-story-dropboxs-exodus-amazon-cloud-empire/">Wired article on Dropbox</a></li>
<li>Rust documentation on expression-oriented-ness:
<ul>
<li><a href="https://doc.rust-lang.org/book/functions.html#expressions-vs-statements">Rust Book</a></li>
<li><a href="http://rustbyexample.com/expression.html">Rust by Example</a></li>
<li><a href="https://doc.rust-lang.org/reference.html#statements-and-expressions">Rust Reference</a></li>
</ul></li>
<li><a href="https://github.com/rust-lang/rust/issues/1698">Removing Rust ternary</a></li>
<li><a href="http://www.jpl.nasa.gov/edu/news/2016/3/16/how-many-decimals-of-pi-do-we-really-need/">Digits of pi necessary for astronavigation</a></li>
</ul>
<h2 id="sponsors">Sponsors</h2>
<ul>
<li>Aleksey Pirogov</li>
<li>Chris Palmer</li>
<li><a href="https://twitter.com/derekmorr">Derek Morr</a></li>
<li>Hamza Sheikh</li>
<li>Lachlan Collins</li>
<li>Leif Arne Storset</li>
<li>Luca Schmid</li>
<li>Micael Bergeron</li>
<li>Pascal</li>
<li>Ralph Giles (“rillian”)</li>
<li>Ralph “FriarTech” Loizzo</li>
<li>reddraggone9</li>
<li>Ryan Ollos</li>
<li><a href="http://willroe.me">William Roe</a></li>
</ul>
<h3 id="become-a-sponsor">Become a sponsor</h3>
<ul>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li><a href="https://venmo.com/chriskrycho">Venmo</a></li>
<li><a href="https://www.dwolla.com/hub/chriskrycho">Dwolla</a></li>
<li><a href="https://cash.me/$chriskrycho">Cash.me</a></li>
</ul>
<h2 id="contact">Contact</h2>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul></li>
<li>Chris Krycho
<ul>
<li>GitHub: <a href="https://github.com/chriskrycho">chriskrycho</a></li>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
</ul></li>
</ul>]]></description>
            <pubDate>Mon, 21 Mar 2016 07:00:00 -0400</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e012.m4a" length="6768120" type="audio/x-m4a"/>
            <guid isPermaLink="false">301B3967-5003-4D65-8ED6-D4594C2832F8</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:summary><![CDATA[What it means to be an expression-oriented language, and how that works out in Rust.

Notes

Rust is an expression-oriented language. What does that mean, and how does it play out in Rust? We look at if and match blocks, discuss looping constructs, and examine functions, and then widen out to discuss how having an expression-oriented language can change the way we think about programming.

Sponsors

* Aleksey Pirogue

* Chris Palmer

* Derek Morr

* Hamza Sheikh

* Lachlan Collins

* Leif Arne Storset

* Luca Schmid

* Micael Bergeron

* Pascal

* Ralph Giles (“gillian”)

* Ralph “FriarTech” Loizzo

* reddraggone9

* Ryan Oleos

* William Roe

Become a sponsor

* Patreon.com/newrustacean

* Venmo.com/chriskrycho

* Dwolla.com/hub/chriskrycho

* Cash.me/$chriskrycho


Contact

* New Rustacean:

- Twitter: @newrustacean

- Email: hello@newrustacean.com

* Chris Krycho

- GitHub: chriskrycho

- Twitter: @chriskrycho]]></itunes:summary>
            <itunes:duration>16:41</itunes:duration>
        </item>
        <item>
            <title>e011: Once Upon a Type</title>
            <link>http://newrustacean.com/show_notes/e011/</link>
            <description><![CDATA[<p>Type systems: strong vs. weak, dynamic vs. static, and degrees of expressivity.</p>
<h2 id="notes">Notes</h2>
<p>Talking about type systems! A broad and wide-ranging discussion about type systems in general, with specific examples from languages like PHP, JavaScript, Python, C, C++, Java, C♯, Haskell, and Rust!</p>
<ul>
<li>What is a type system?</li>
<li>What are the kinds of things we get out of type systems?</li>
<li>What are the tradeoffs with different type systems?</li>
<li>What is Rust’s type system like?</li>
<li>What is especially attractive about Rust’s type system?</li>
</ul>
<p>A comment on the C integer/character string addition example: what’s actually happening there is that the character string is an array “under the covers,” and as such has an address. C silently switches to using the memory address, which is of course just an integer, when you try to add the two together. As I said on the show: the result is nonsense (unless you’re using this as a way of operating on memory addresses), but it’s compileable nonsense. In a stricter and stronger type system, memory addresses and normal numbers shouldn’t be addable!</p>
<h2 id="links">Links</h2>
<ul>
<li><a href="http://blog.rust-lang.org/2016/03/02/Rust-1.7.html">Rust 1.7 released</a>
<ul>
<li><a href="http://blog.rust-lang.org/2016/03/02/Rust-1.7.html#library-stabilizations"><code>HashMap</code> changes</a></li>
</ul></li>
<li><a href="http://www.cs.ru.nl/~herman/PUBS/IntroTT-improved.pdf">Introduction to Type Theory</a></li>
<li><a href="https://jadpole.github.io/rust/type-system/">Visualizing Rust’s type-system</a></li>
<li><a href="http://cglab.ca/~abeinges/blah/rust-reuse-and-recycle/">The Many Kinds of Code Reuse in Rust</a></li>
</ul>
<h2 id="sponsors">Sponsors</h2>
<ul>
<li>Aleksey Pirogov</li>
<li>Chris Palmer</li>
<li><a href="https://twitter.com/derekmorr">Derek Morr</a></li>
<li>Hamza Sheikh</li>
<li>Lachlan Collins</li>
<li>Leif Arne Storset</li>
<li>Luca Schmid</li>
<li>Micael Bergeron</li>
<li>Pascal</li>
<li>Ralph Giles (“rillian”)</li>
<li>Ralph “FriarTech” Loizzo</li>
<li>reddraggone9</li>
<li>Ryan Ollos</li>
<li><a href="http://willroe.me">William Roe</a></li>
</ul>
<h3 id="become-a-sponsor">Become a sponsor</h3>
<ul>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li><a href="https://venmo.com/chriskrycho">Venmo</a></li>
<li><a href="https://www.dwolla.com/hub/chriskrycho">Dwolla</a></li>
<li><a href="https://cash.me/$chriskrycho">Cash.me</a></li>
</ul>
<h2 id="contact">Contact</h2>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul></li>
<li>Chris Krycho
<ul>
<li>GitHub: <a href="https://github.com/chriskrycho">chriskrycho</a></li>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
</ul></li>
</ul>
]]></description>
            <pubDate>Tue, 08 Mar 2016 10:00:00 -0500</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e011.m4a" length="7267955" type="audio/x-m4a"/>
            <guid isPermaLink="false">AC4E31F9-5811-4B6E-86E2-5E3ED3CE8DEF</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:summary><![CDATA[Type systems: strong vs. weak, dynamic vs. static, and degrees of expressivity.

Notes

Talking about type systems! A broad and wide-ranging discussion about type systems in general, with specific examples from languages like PHP, JavaScript, Python, C, C++, Java, C♯, Haskell, and Rust!

* What is a type system?

* What are the kinds of things we get out of type systems?

* What are the tradeoffs with different type systems?

* What is Rust’s type system like?

* What is especially attractive about Rust’s type system?

A comment on the C integer/character string addition example: what’s actually happening there is that the character string is an array “under the covers,” and as such has an address. C silently switches to using the memory address, which is of course just an integer, when you try to add the two together. As I said on the show: the result is nonsense (unless you’re using this as a way of operating on memory addresses), but it’s compellable nonsense. In a stricter and stronger type system, memory addresses and normal numbers shouldn’t be addable!


Sponsors

* Aleksey Pirogue

* Chris Palmer

* Derek Morr

* Hamza Sheikh

* Lachlan Collins

* Leif Arne Storset

* Luca Schmid

* Micael Bergeron

* Pascal

* Ralph Giles (“gillian”)

* Ralph “FriarTech” Loizzo

* reddraggone9

* Ryan Oleos

* William Roe


Become a sponsor

* Patreon.com/newrustacean

* Venmo.com/chriskrycho

* Dwolla.com/hub/chriskrycho

* Cash.me/$chriskrycho


Contact

* New Rustacean:

- Twitter: @newrustacean

- Email: hello@newrustacean.com

* Chris Krycho

- GitHub: chriskrycho

- Twitter: @chriskrycho]]></itunes:summary>
            <itunes:duration>17:51</itunes:duration>
        </item>
        <item>
            <title>Interview 1::Part 2 – Sean Griffin</title>
            <link>http://newrustacean.com/show_notes/interview/_1/part_2/</link>
            <description><![CDATA[<p>Sean Griffin on type systems and hopes for Rust's future</p>
<h2>Notes</h2>
<p>Chris chats with Sean Griffin about the tradeoffs between mental overhead and type safety, the expressiveness of different type systems, and some of the places where Rust currently falls down.</p>
<h3>Corrigenda</h3>
<p>Sean noted he could be wrong about <code>IEnumerable&lt;T&gt;</code> not having a <code>Sum</code> method in C♯, and post-show research indicated that he was (it's possible it was added after he had stopped doing .NET work, of course). See the <a href="https://msdn.microsoft.com/library/bb919210(v=vs.90).aspx">documentation</a> for details on how <code>IEnumerable&lt;T&gt;.Sum</code> it behaves in C♯ if you're curious.</p>
<p>As a related note, I (Chris) have done a little bit of digging on C♯ in the interval and it's fair to say that while a lot of the "ceremony" involved in writing C♯ is annoying, it's much more than just a "slightly nicer Java", and indeed is a much nicer language than my previous, limited exposure had led me to believe. It's no Rust or F♯, but its type system is substantially more capable than Java's.</p>
<table><thead><tr></tr></thead><tbody><tr></tr></tbody></table><h2>Links</h2>
<ul>
<li>fmap
<ul>
<li><a href="https://robots.thoughtbot.com/functional-swift-for-dealing-with-optional-values">Discussion of <code>fmap</code> with <code>Optional</code> in Swift</a></li>
<li><a href="http://learnyouahaskell.com/functors-applicative-functors-and-monoids">In Haskell</a></li>
</ul>
</li>
<li>Rust:
<ul>
<li><a href="https://doc.rust-lang.org/book/trait-objects.html">Trait objects</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/1210">Specialization RFC</a>
<ul>
<li><a href="https://github.com/rust-lang/rust/issues/31844">Implementation</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="https://github.com/sgrif/diesel">Diesel</a></li>
</ul>
<table><thead><tr></tr></thead><tbody><tr></tr></tbody></table><h2>Sponsors</h2>
<ul>
<li>Aleksey Pirogov</li>
<li>Chris Palmer</li>
<li><a href="https://twitter.com/derekmorr">Derek Morr</a></li>
<li>Hamza Sheikh</li>
<li>Leif Arne Storset</li>
<li>Luca Schmid</li>
<li>Micael Bergeron</li>
<li>Ralph Giles ("rillian")</li>
<li>reddraggone9</li>
<li>Ryan Ollos</li>
<li><a href="http://willroe.me">William Roe</a></li>
</ul>
<h3>Become a sponsor</h3>
<ul>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li><a href="https://venmo.com/chriskrycho">Venmo</a></li>
<li><a href="https://www.dwolla.com/hub/chriskrycho">Dwolla</a></li>
<li><a href="https://cash.me/$chriskrycho">Cash.me</a></li>
</ul>
<h2>Follow</h2>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul>
</li>
<li>Chris Krycho
<ul>
<li>GitHub: <a href="https://github.com/chriskrycho">chriskrycho</a></li>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
</ul>
</li>
</ul>
]]></description>
            <pubDate>Thu, 25 Feb 2016 08:30:00 -0500</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/interview_1_part_2.m4a" length="8971891" type="audio/x-m4a"/>
            <guid isPermaLink="false">EF51E282-74DB-4F9F-8952-DBF70B1F8B2E</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:summary><![CDATA[Sean Griffin on type systems and hopes for Rust's future


Notes
-----

Chris chats with Sean Griffin about the tradeoffs between mental overhead and type safety, the expressiveness of different type systems, and some of the places where Rust currently falls down.

### Corrigenda

Sean noted he could be wrong about `IEnumerable<T>` not having a `Sum` method in C♯, and post-show research indicated that he was (it's possible it was added after he had stopped doing .NET work, of course). See the [documentation][c1] for details on how `IEnumerable<T>.Sum` it behaves in C♯ if you're curious.

As a related note, I (Chris) have done a little bit of digging on C♯ in the interval and it's fair to say that while a lot of the "ceremony" involved in writing C♯ is annoying, it's much more than just a "slightly nicer Java", and indeed is a much nicer language than my previous, limited exposure had led me to believe. It's no Rust or F♯, but its type system is substantially more capable than Java's.

[c1]: https://msdn.microsoft.com/library/bb919210(v=vs.90).aspx


Links
-----

  - fmap
      + [Discussion of `fmap` with `Optional` in Swift][l1]
      + [In Haskell][l2]
  - Rust:
      + [Trait objects][l3]
      + [Specialization RFC][l4]
          * [Implementation][l5]
  - [Diesel][l6]

[l1]: https://robots.thoughtbot.com/functional-swift-for-dealing-with-optional-values
[l2]: http://learnyouahaskell.com/functors-applicative-functors-and-monoids
[l3]: https://doc.rust-lang.org/book/trait-objects.html
[l4]: https://github.com/rust-lang/rfcs/pull/1210
[l5]: https://github.com/rust-lang/rust/issues/31844
[l6]: https://github.com/sgrif/diesel


Sponsors
--------

  - Aleksey Pirogov
  - Chris Palmer
  - [Derek Morr][s3]
  - Hamza Sheikh
  - Leif Arne Storset
  - Luca Schmid
  - Micael Bergeron
  - Ralph Giles ("rillian")
  - reddraggone9
  - Ryan Ollos
  - [William Roe][s11]

[s3]: https://twitter.com/derekmorr
[s11]: http://willroe.me

### Become a sponsor

  - [Patreon](https://www.patreon.com/newrustacean)
  - [Venmo](https://venmo.com/chriskrycho)
  - [Dwolla](https://www.dwolla.com/hub/chriskrycho)
  - [Cash.me](https://cash.me/$chriskrycho)


Follow
------

  - New Rustacean:
      + Twitter: [@newrustacean](https://www.twitter.com/newrustacean)
      + Email: [hello@newrustacean.com](mailto:hello@newrustacean.com)
  - Chris Krycho
      + GitHub: [chriskrycho](https://github.com/chriskrycho)
      + Twitter: [@chriskrycho](https://www.twitter.com/chriskrycho)
]]></itunes:summary>
            <itunes:duration>22:14</itunes:duration>
        </item>
        <item>
            <title>Interview 1::Part 1 – Sean Griffin</title>
            <link>http://newrustacean.com/show_notes/interview/_1/part_1/</link>
            <description><![CDATA[<p>Sean Griffin on Rust, ORMs, and Web Frameworks</p>
<h2>Notes</h2>
<p>Chris chats with Sean Griffin about his programming background and initial experience with Rust, Rust's appeal, and what he's doing with Diesel and some of his plans for a new web framework in Rust.</p>
<h2>Links</h2>
<ul>
<li><a href="http://rubyonrails.org">Ruby on Rails</a></li>
<li><a href="http://guides.rubyonrails.org/active_record_basics.html">Active Record</a></li>
<li><a href="http://diesel.rs">Diesel</a>
<ul>
<li><a href="https://github.com/sgrif/diesel">GitHub</a></li>
<li><a href="https://gitter.im/sgrif/diesel">Gitter</a></li>
</ul>
</li>
<li><a href="http://bikeshed.fm">The Bike Shed</a> episodes which include talk of Rust and Diesel
<ul>
<li><a href="http://bikeshed.fm/51">51: Is Sim City Still Running (with Steve Klabnik)</a></li>
<li><a href="http://bikeshed.fm/49">49: A More Practical Haskell</a></li>
<li><a href="http://bikeshed.fm/48">48: Is Everyone Trying Their Best?</a></li>
<li><a href="http://bikeshed.fm/46">46: Don't Breath, Save the Planet</a></li>
<li><a href="http://bikeshed.fm/44">44: It Won't Crash... It Might Crash</a></li>
<li><a href="http://bikeshed.fm/39">39: Okay With Instability</a></li>
<li><a href="http://bikeshed.fm/32">32: Bug for Bug Compatibility</a></li>
<li><a href="http://bikeshed.fm/31">31: Oxidizing an ORM</a></li>
<li><a href="http://bikeshed.fm/27">27: I've Got 29.97 Problems (and codecs are some)</a></li>
<li><a href="http://bikeshed.fm/23">23: Why Did They Call It Rust?</a></li>
</ul>
</li>
<li><a href="https://gumroad.com/l/maybe-haskell"><em>Maybe Haskell</em></a></li>
</ul>
<h2>Sponsors</h2>
<ul>
<li>Aleksey Pirogov</li>
<li>Chris Palmer</li>
<li><a href="https://twitter.com/derekmorr">Derek Morr</a></li>
<li>Hamza Sheikh</li>
<li>Leif Arne Storset</li>
<li>Luca Schmid</li>
<li>Micael Bergeron</li>
<li>Ralph Giles ("rillian")</li>
<li>reddraggone9</li>
<li>Ryan Ollos</li>
<li><a href="http://willroe.me">William Roe</a></li>
</ul>
<h3>Become a sponsor</h3>
<ul>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li><a href="https://venmo.com/chriskrycho">Venmo</a></li>
<li><a href="https://www.dwolla.com/hub/chriskrycho">Dwolla</a></li>
<li><a href="https://cash.me/$chriskrycho">Cash.me</a></li>
</ul>
<h2>Follow</h2>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul>
</li>
<li>Chris Krycho
<ul>
<li>GitHub: <a href="https://github.com/chriskrycho">chriskrycho</a></li>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
</ul>
</li>
</ul>
]]></description>
            <pubDate>Mon, 15 Feb 2016 15:00:00 -0500</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/interview_1_part_1.m4a" length="10169865" type="audio/x-m4a"/>
            <guid isPermaLink="false">2FDF4C7A-DEC9-4642-A5FB-99D1D6726527</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:summary><![CDATA[Sean Griffin on Rust, Diesel, and ORMs


Notes

Chris chats with Sean Griffin about his programming background and
initial experience with Rust, Rust’s appeal, and what he’s doing with
Diesel and some of his plans for a new web framework in Rust.


Sponsors

-   Aleksey Pirogov
-   Chris Palmer
-   Derek Morr
-   Hamza Sheikh
-   Leif Arne Storset
-   Luca Schmid
-   Micael Bergeron
-   Ralph Giles (“rillian”)
-   reddraggone9
-   Ryan Ollos
-   William Roe

Become a sponsor

-   Patreon
-   Venmo
-   Dwolla
-   Cash.me


Follow

-   New Rustacean:
    -   Twitter: @newrustacean
    -   Email: hello@newrustacean.com
-   Chris Krycho
    -   GitHub: chriskrycho
    -   Twitter: @chriskrycho]]></itunes:summary>
            <itunes:duration>24:50</itunes:duration>
        </item>
        <item>
            <title>Bonus 3: Building as a community</title>
            <link>http://newrustacean.com/show_notes/bonus/_3/</link>
            <description><![CDATA[<p>Community is one of the most important parts of a programming language community, or indeed <em>any</em> technical community. In this episode, I talk a bit about what happens when you don't have a good community, how Rust's community has done well so far, and then how to keep building a good community and how to build good things <em>as</em> a community.</p>
<h2 id="sponsors">Sponsors</h2>
<ul>
<li>Aleksey Pirogov</li>
<li>Chris Palmer</li>
<li><a href="https://twitter.com/derekmorr">Derek Morr</a></li>
<li>Hamza Sheikh</li>
<li>Luca Schmid</li>
<li>Micael Bergeron</li>
<li>Ralph Giles (“rillian”)</li>
<li>reddraggone9</li>
<li><a href="http://willroe.me">William Roe</a></li>
</ul>
<h3 id="become-a-sponsor">Become a sponsor</h3>
<ul>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li><a href="https://venmo.com/chriskrycho">Venmo</a></li>
<li><a href="https://www.dwolla.com/hub/chriskrycho">Dwolla</a></li>
<li><a href="https://cash.me/$chriskrycho">Cash.me</a></li>
</ul>
<h2 id="follow">Follow</h2>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>App.net: <a href="https://alpha.app.net/newrustacean">@newrustacean</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul>
</li>
<li>Chris Krycho
<ul>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
<li>App.net: <a href="https://alpha.app.net/chriskrycho">@chriskrycho</a></li>
</ul>
</li>
</ul>]]></description>
            <pubDate>Sun, 31 Jan 2016 19:08:36 -0500</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/bonus_3.m4a" length="4945501" type="audio/x-m4a"/>
            <guid isPermaLink="false">E1508C29-D386-4AC2-AACD-10B6C716CDCC</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:summary><![CDATA[The value of a good community, and how you can help Rust today.

Community is one of the most important parts of a programming language community, or indeed *any* technical community. In this episode, I talk a bit about what happens when you don't have a good community, how Rust's community has done well so far, and then how to keep building a good community and how to build good things *as* a community.

Sponsors

-   Aleksey Pirogov
-   Chris Palmer
-   Derek Morr
-   Hamza Sheikh
-   Luca Schmid
-   Micael Bergeron
-   Ralph Giles (“rillian”)
-   reddraggone9
-   William Roe

Become a sponsor

-   Patreon.com/newrustacean
-   Venmo.com/chriskrycho
-   Dwolla.com/hub/chriskrycho
-   Cash.me/$chriskrycho

Follow

-   New Rustacean:
    -   Twitter: @newrustacean
    -   App.net: @newrustacean
    -   Email: hello@newrustacean.com
-   Chris Krycho
    -   Twitter: @chriskrycho
    -   App.net: @chriskrycho]]></itunes:summary>
            <itunes:duration>12:03</itunes:duration>
        </item>
        <item>
            <title>e010: Macros rule!</title>
            <link>http://newrustacean.com/show_notes/e010/</link>
            <description><![CDATA[<p>Macros rule!</p>

<h2 id="notes">Notes</h2>Because of the way macros are exported—before name resolution on crates occurs—the documentation for the macros defined in the source for this episode occurs in the <a href="http://www.newrustacean.com/show_notes/#macros"><strong>Macros</strong> section of the <code>show_notes</code> crate</a> documentation, rather than within the documentation for this module. (See the Rust Book discussion of <a href="http://doc.rust-lang.org/stable/book/documentation.html#documenting-macros">documenting macros</a> for details.) Even so, the <a href="http://www.newrustacean.com/src/show_notes/e009.rs.html">source</a> is still in this module; see the <a href="http://www.newrustacean.com/src/show_notes/e010.rs.html#101">implementations</a> for details.
<br />
<h2 id="links">Links</h2>
<ul>
<li><a href="https://doc.rust-lang.org/book/macros.html">Rust book: Macros</a></li>
<li><a href="http://rustbyexample.com/macros.html">Rust by Example: Macros</a></li>
<li><a href="https://doc.rust-lang.org/reference.html#macros">Rust reference: Macros</a></li>
<li><a href="https://www.cs.indiana.edu/ftp/techreports/TR206.pdf">“Macro by Example”</a> (original paper)</li>
<li>Nick Cameron:
<ul>
<li><a href="http://www.ncameron.org/blog/macros/">Macros</a></li>
<li>Macros in Rust
<ul>
<li><a href="http://ncameron.org/blog/macros-in-rust-pt1/">Part 1: <code>macro_rules!</code></a></li>
<li><a href="http://www.ncameron.org/blog/macros-in-rust-pt2/">Part 2: procedural macros</a></li>
<li><a href="http://www.ncameron.org/blog/macros-in-rust-pt3/">Part 3: hygiene</a></li>
<li><a href="http://www.ncameron.org/blog/macros-in-rust-pt4/">Part 4: scoping and import/export</a></li>
<li><a href="http://www.ncameron.org/blog/macros-in-rust-pt5/">Part 5: current problems and possible solutions</a></li>
<li><a href="http://www.ncameron.org/blog/macros-pt6-more-issues/">Part 6: more issues with <code>macro_rules!</code></a></li>
</ul>
</li>
<li><a href="http://www.ncameron.org/blog/untitledconcat_idents-and-macros-in-ident-position/"><code>concat_idents</code> and macros in ident positions</a></li>
<li><a href="http://www.ncameron.org/blog/macro-plans-overview/">Macro plans, overview</a></li>
<li><a href="http://www.ncameron.org/blog/macro-hygiene-in-all-its-guises-and-variations/">Macro hygiene in all its guises and variations</a></li>
<li><a href="http://www.ncameron.org/blog/sets-of-scopes-macro-hygiene/">Sets of scopes macro hygiene</a></li>
<li><a href="http://www.ncameron.org/blog/macro-plans-syntax/">Macro plans: syntax</a></li>
<li><a href="http://www.ncameron.org/blog/procedural-macros-framework/">Procedural macros, framework</a></li>
</ul>
</li>
</ul>
<h2 id="sponsors">Sponsors</h2>
<ul>
<li>Aleksey Pirogov</li>
<li>Chris Palmer</li>
<li><a href="https://twitter.com/derekmorr">Derek Morr</a></li>
<li>Hamza Sheikh</li>
<li>Luca Schmid</li>
<li>Micael Bergeron</li>
<li>Ralph Giles (“rillian”)</li>
<li>reddraggone9</li>
<li><a href="http://willroe.me">William Roe</a></li>
</ul>
<h3 id="become-a-sponsor">Become a sponsor</h3>
<ul>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li><a href="https://venmo.com/chriskrycho">Venmo</a></li>
<li><a href="https://www.dwolla.com/hub/chriskrycho">Dwolla</a></li>
<li><a href="https://cash.me/$chriskrycho">Cash.me</a></li>
</ul>
<h2 id="follow">Follow</h2>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>App.net: <a href="https://alpha.app.net/newrustacean">@newrustacean</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul>
</li>
<li>Chris Krycho
<ul>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
<li>App.net: <a href="https://alpha.app.net/chriskrycho">@chriskrycho</a></li>
</ul>
</li>
</ul>]]></description>
            <pubDate>Mon, 18 Jan 2016 10:25:00 -0500</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e010.m4a" length="6522635" type="audio/x-m4a"/>
            <guid isPermaLink="false">http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e010.m4a</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:subtitle>Using Rust's macro system, its limitations, and its future.</itunes:subtitle>
            <itunes:summary><![CDATA[
Using Rust's macro system, its limitations, and its future.

Because of the way macros are exported—before name resolution on crates occurs—the documentation for the macros defined in the source for this episode occurs in the MACROS section of the show_notes crate documentation, rather than within the documentation for this module. (See the Rust Book discussion of documenting macros for details.) Even so, the source is still in this module; see the implementations for details.

Sponsors

-   Aleksey Pirogov
-   Chris Palmer
-   Derek Morr
-   Hamza Sheikh
-   Luca Schmid
-   Micael Bergeron
-   Ralph Giles (“rillian”)
-   reddraggone9
-   William Roe

Become a sponsor

-   Patreon.com/newrustacean
-   Venmo.com/chriskrycho
-   Dwolla.com/hub/chriskrycho
-   Cash.me/$chriskrycho

Follow

-   New Rustacean:
    -   Twitter: @newrustacean
    -   App.net: @newrustacean
    -   Email: hello@newrustacean.com
-   Chris Krycho
    -   Twitter: @chriskrycho
    -   App.net: @chriskrycho
]]></itunes:summary>
            <itunes:duration>16:32</itunes:duration>
        </item>
        <item>
            <title>e009: Composing a Rustic tune</title>
            <link>http://newrustacean.com/show_notes/e009/</link>
            <description><![CDATA[<h2 id="notes">Notes</h2>
<p>Last time, we looked at generics and traits at a high level. This time, we dig deeper on traits, looking specifically at <code>std::iter::Iterator</code> as an example of a powerful trait that can be composed across types, and then at how we might compose multiple traits on a single type.</p>
<p>We also talk about the syntax for traits, the use of marker traits, some of the things you <em>can’t</em> presently do with traits, and even just a smidge about the <em>future</em> of traits in Rust. All that in less than 20 minutes!</p>
<p>You’ll find today’s <a href="/src/show_notes/e009.rs.html">source example</a> fairly interesting, I think: it’s just one type, but it uses almost every concept discussed on the show today!</p>
<h2 id="links">Links</h2>
<ul>
<li>Nick Cameron: <a href="http://www.ncameron.org/blog/my-thoughts-on-rust-in-2016/">“Thoughts on Rust in 2016”</a></li>
<li><a href="https://users.rust-lang.org/t/upcoming-breakage-starting-in-rust-1-7-from-rfcs-1214-and-136/4207">“Upcoming breakage starting in Rust 1.7, from RFCs 1214 and 136”</a>
<ul>
<li><a href="https://github.com/rust-lang/rfcs/blob/master/text/1214-projections-lifetimes-and-wf.md">RFC 1214: Clarify (and improve) rules for projections and well-formedness</a></li>
<li><a href="https://github.com/rust-lang/rfcs/blob/master/text/0136-no-privates-in-public.md">RFC 136: Ban private items in public APIs</a></li>
</ul></li>
<li>The Rust Book:
<ul>
<li><a href="https://doc.rust-lang.org/book/traits.html">Traits</a></li>
<li><a href="https://doc.rust-lang.org/book/trait-objects.html">Trait objects</a> (dynamic dispatch)</li>
</ul></li>
<li>The Rust reference:
<ul>
<li><a href="https://doc.rust-lang.org/std/iter/index.html"><code>std::iter</code></a> and <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html"><code>std::iter::Iterator</code></a></li>
<li><a href="https://doc.rust-lang.org/std/ops/trait.Add.html"><code>Add</code></a></li>
<li><a href="https://doc.rust-lang.org/std/ops/trait.Drop.html"><code>Drop</code></a></li>
<li><a href="https://doc.rust-lang.org/std/cmp/trait.PartialEq.html"><code>PartialEq</code></a> and <a href="https://doc.rust-lang.org/std/cmp/trait.Eq.html"><code>Eq</code></a></li>
<li><a href="https://doc.rust-lang.org/std/cmp/trait.PartialOrd.html"><code>PartialOrd</code></a> and <a href="https://doc.rust-lang.org/std/cmp/trait.Ord.html"><code>Ord</code></a></li>
<li><a href="https://doc.rust-lang.org/book/traits.html">Special traits</a></li>
<li><a href="https://doc.rust-lang.org/reference.html#trait-objects">Trait objects</a></li>
</ul></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/1210">RFC: impl specialization</a>
<ul>
<li>Aaron Turon: <a href="https://aturon.github.io/blog/2015/09/18/reuse/">“Specialize to reuse”</a></li>
</ul></li>
</ul>
<h2 id="sponsors">Sponsors</h2>
<ul>
<li>Aleksey Pirogov</li>
<li>Chris Palmer</li>
<li><a href="https://twitter.com/derekmorr">Derek Morr</a></li>
<li>Hamza Sheikh</li>
<li>Luca Schmid</li>
<li>Micael Bergeron</li>
<li>Ralph Giles (“rillian”)</li>
<li>reddraggone9</li>
<li><a href="http://willroe.me">William Roe</a></li>
</ul>
<h3 id="become-a-sponsor">Become a sponsor</h3>
<ul>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li><a href="https://venmo.com/chriskrycho">Venmo</a></li>
<li><a href="https://www.dwolla.com/hub/chriskrycho">Dwolla</a></li>
<li><a href="https://cash.me/$chriskrycho">Cash.me</a></li>
</ul>
<h2 id="follow">Follow</h2>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>App.net: <a href="https://alpha.app.net/newrustacean">@newrustacean</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul></li>
<li>Chris Krycho
<ul>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
<li>App.net: <a href="https://alpha.app.net/chriskrycho">@chriskrycho</a></li>
</ul></li>
</ul>
]]></description>
            <pubDate>Sat, 09 Jan 2016 16:00:11 -0500</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e009.m4a" length="7152387" type="audio/x-m4a"/>
            <guid isPermaLink="false">505802A1-4F58-4C3C-A268-B1354B5B2F8E</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:subtitle>Getting into the nitty-gritty with Rust's traits.</itunes:subtitle>
            <itunes:summary><![CDATA[
Notes

Last time, we looked at generics and traits at a high level. This time, we dig deeper on traits, looking specifically at std::iter::Iterator as an example of a powerful trait that can be composed across types, and then at how we might compose multiple traits on a single type.

We also talk about the syntax for traits, the use of marker traits, some of the things you _can’t_ presently do with traits, and even just a smidge about the _future_ of traits in Rust. All that in less than 20 minutes!

You’ll find today’s source example fairly interesting, I think: it’s just one type, but it uses almost every concept discussed on the show today!


Links

-   Nick Cameron: “Thoughts on Rust in 2016”
-   “Upcoming breakage starting in Rust 1.7, from RFCs 1214 and 136”
    -   RFC 1214: Clarify (and improve) rules for projections and well-formedness
    -   RFC 136: Ban private items in public APIs
-   The Rust Book:
    -   Traits
    -   Trait objects (dynamic dispatch)
-   The Rust reference:
    -   std::iter and std::iter::Iterator
    -   Add
    -   Drop
    -   PartialEq and Eq
    -   PartialOrd and Ord
    -   Special traits
    -   Trait objects
-   RFC: impl specialization
    -   Aaron Turon: “Specialize to reuse”


Sponsors

-   Aleksey Pirogov
-   Chris Palmer
-   Derek Morr
-   Hamza Sheikh
-   Luca Schmid
-   Micael Bergeron
-   Ralph Giles (“rillian”)
-   reddraggone9
-   William Roe

Become a sponsor

-   Patreon.com/newrustacean
-   Venmo.com/chriskrycho
-   Dwolla.com/hub/chriskrycho
-   Cash.me/$chriskrycho


Follow

-   New Rustacean:
    -   Twitter: @newrustacean
    -   App.net: @newrustacean
    -   Email: hello@newrustacean.com
-   Chris Krycho
    -   Twitter: @chriskrycho
    -   App.net: @chriskrycho

]]></itunes:summary>
            <itunes:duration>17:23</itunes:duration>
        </item>
        <item>
            <title>e008: Just like something else</title>
            <link>http://newrustacean.com/show_notes/e008/</link>
            <description><![CDATA[<h2 id="notes">Notes</h2>
<p>In this episode we cover—at a <em>very</em> high level—two more fundamental concepts in Rust programming: generics and traits.</p>
<p>Generics gives us the abilitty to write types and functions which can be used with more than one type. Traits give us the ability to specify behavior which can be implemented for more than one type. The combination gives us powerful tools for higher-level programming constructs in Rust.</p>
<h3 id="comments-on-source-code">Comments on source code</h3>
<p>Now that we have a handle on <a href="http://www.newrustacean.com/show_notes/e007/">how tests work</a>, we’ll use them to validate the behavior of our code going forward. This is great: we can show that the tests do what we think.</p>
<p>To today’s point, though: we actually know even apart from whether the tests <em>run</em> successfully that these generic functions and the associated traits are behaving as we want. Failure with generics is a <em>compile</em>-time error, not a runtime error.</p>
<h2 id="links">Links</h2>
<ul>
<li>Rust Book
<ul>
<li><a href="https://doc.rust-lang.org/book/generics.html">Generics</a></li>
<li><a href="https://doc.rust-lang.org/book/traits.html">Traits</a> – includes a discussion of <em>trait bounds</em> and <em>generic </em>traits*</li>
</ul></li>
<li>Rust by Example
<ul>
<li><a href="http://rustbyexample.com/generics.html">Generics</a></li>
<li><a href="http://rustbyexample.com/trait.html">Traits</a></li>
<li><a href="http://rustbyexample.com/generics/gen_trait.html">Generic <em>traits</em></a></li>
<li><a href="http://rustbyexample.com/generics/bounds.html">Traits <em>bounds</em></a></li>
</ul></li>
<li><a href="https://github.com/sgrif/diesel/blob/master/diesel/src/types/mod.rs">Generics and traits in use in Diesel</a></li>
</ul>
<h2 id="sponsors">Sponsors</h2>
<ul>
<li>Chris Palmer</li>
<li><a href="https://twitter.com/derekmorr">Derek Morr</a></li>
<li>Luca Schmid</li>
<li>Micael Bergeron</li>
<li>Ralph Giles (“rillian”)</li>
<li>reddraggone9</li>
<li><a href="http://willroe.me">William Roe</a></li>
</ul>
<h3 id="become-a-sponsor">Become a sponsor</h3>
<ul>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li><a href="https://venmo.com/chriskrycho">Venmo</a></li>
<li><a href="https://www.dwolla.com/hub/chriskrycho">Dwolla</a></li>
<li><a href="https://cash.me/$chriskrycho">Cash.me</a></li>
</ul>
<h2 id="follow">Follow</h2>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>App.net: <a href="https://alpha.app.net/newrustacean">@newrustacean</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul></li>
<li>Chris Krycho
<ul>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
<li>App.net: <a href="https://alpha.app.net/chriskrycho">@chriskrycho</a></li>
</ul></li>
</ul>]]></description>
            <pubDate>Sun, 27 Dec 2015 11:19:47 -0500</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e008.m4a" length="7215734" type="audio/x-m4a"/>
            <guid isPermaLink="false">C41DFF97-B4A0-4A50-89AF-4803FD50B547</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:subtitle>Generics, traits, and shared behavior in Rust.</itunes:subtitle>
            <itunes:summary><![CDATA[
Notes

In this episode we cover—at a _very_ high level—two more fundamental
concepts in Rust programming: generics and traits.

Generics gives us the abilitty to write types and functions which can be
used with more than one type. Traits give us the ability to specify
behavior which can be implemented for more than one type. The
combination gives us powerful tools for higher-level programming
constructs in Rust.

Comments on source code

Now that we have a handle on how tests work, we’ll use them to validate
the behavior of our code going forward. This is great: we can show that
the tests do what we think.

To today’s point, though: we actually know even apart from whether the
tests _run_ successfully that these generic functions and the associated
traits are behaving as we want. Failure with generics is a
_compile_-time error, not a runtime error.


Sponsors

-   Chris Palmer
-   Derek Morr
-   Luca Schmid
-   Micael Bergeron
-   Ralph Giles (“rillian”)
-   reddraggone9
-   William Roe

Become a sponsor

-   Patreon/newrustacean
-   Venmo.com/chriskrycho
-   Dwolla.com/hub/chriskrycho
-   Cash.me/$chriskrycho


Follow

-   New Rustacean:
    -   Twitter: @newrustacean
    -   App.net: @newrustacean
    -   Email: hello@newrustacean.com
-   Chris Krycho
    -   Twitter: @chriskrycho
    -   App.net: @chriskrycho]]></itunes:summary>
            <itunes:duration>17:37</itunes:duration>
        </item>
        <item>
            <title>e007: Testify</title>
            <link>http://newrustacean.com/show_notes/e007/</link>
            <description><![CDATA[<h2 id="notes">Notes</h2>
<p>All about testing in Rust! In order, we take a look at:</p>
<ul>
<li>Why you need tests.</li>
<li>Unit tests in other (dynamically-typed) languages vs. in Rust.</li>
<li>How to write unit tests in Rust.</li>
<li>How and why to write integration tests in Rust.</li>
<li>How and why to use benchmarks in Rust.</li>
</ul>
<p>The detailed code samples for this episode are heavy on showing; because of the nature of test functions, you will be best off just <a href="/src/show_notes/e007.rs.html">reading the source</a> rather than leaning heavily on the descriptions generated by <strong>rustdoc</strong>. (The descriptions are still <em>there</em>, but they’re much less useful than they have been in previous episodes.) In particular, the <code>test</code> module here is excluded because of the use of the <code>#[cfg(test)]</code> attribute marker on it.</p>
<p>Because we are using the feature-gated benchmarking functionality, the show notes “library” can now only be compiled with the Rust nightly (as of 1.5, the version current as this episode is produced).</p>
<p>One thing that isn’t necessarily obvious from reading the test documentation in the Rust book and Rust reference: the <code>extern crate test</code> statement needs to be not in this module, but at the module (<code>lib.rs</code>) which defines the library/crate; in this case, <code>show_notes/lib.rs</code>.</p>
<h2 id="links">Links</h2>
<ul>
<li>Rust Book:
<ul>
<li><a href="https://doc.rust-lang.org/book/testing.html">Testing</a></li>
<li><a href="https://doc.rust-lang.org/book/attributes.html">Attributes</a></li>
<li><a href="https://doc.rust-lang.org/book/benchmark-tests.html">Benchmark tests</a></li>
</ul></li>
<li>Rust reference: <a href="https://doc.rust-lang.org/reference.html#attributes">Attributes</a></li>
<li><a href="https://github.com/sgrif/diesel">Diesel (Rust ORM)</a>
<ul>
<li><a href="http://bikeshed.fm/31">31: Oxidizing an ORM</a></li>
<li><a href="http://bikeshed.fm/32">32: Bug for Bug Compatibility</a></li>
</ul></li>
</ul>
<h2 id="sponsors">Sponsors</h2>
<ul>
<li>Chris Palmer</li>
<li><a href="https://twitter.com/derekmorr">Derek Morr</a></li>
<li>Luca Schmid</li>
<li>Micael Bergeron</li>
<li>Ralph Giles (“rillian”)</li>
<li>reddraggone9</li>
<li><a href="http://willroe.me">William Roe</a></li>
</ul>
<h3 id="become-a-sponsor">Become a sponsor</h3>
<ul>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li><a href="https://venmo.com/chriskrycho">Venmo</a></li>
<li><a href="https://www.dwolla.com/hub/chriskrycho">Dwolla</a></li>
<li><a href="https://cash.me/$chriskrycho">Cash.me</a></li>
</ul>
<h2 id="follow">Follow</h2>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>App.net: <a href="https://alpha.app.net/newrustacean">@newrustacean</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul></li>
<li>Chris Krycho
<ul>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
<li>App.net: <a href="https://alpha.app.net/chriskrycho">@chriskrycho</a></li>
</ul></li>
</ul>]]></description>
            <pubDate>Sun, 13 Dec 2015 12:38:36 -0500</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e007.m4a" length="7669142" type="audio/x-m4a"/>
            <guid isPermaLink="false">9B3A138D-FE96-4A8A-A708-BDCBF1F63A3F</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:subtitle>Testing and benchmarking, and compiler attributes.</itunes:subtitle>
            <itunes:summary><![CDATA[
Notes

All about testing in Rust! In order, we take a look at:

-   Why you need tests.
-   Unit tests in other (dynamically-typed) languages vs. in Rust.
-   How to write unit tests in Rust.
-   How and why to write integration tests in Rust.
-   How and why to use benchmarks in Rust.

The detailed code samples for this episode are heavy on showing; because
of the nature of test functions, you will be best off just reading the
source rather than leaning heavily on the descriptions generated by
RUSTDOC. (The descriptions are still _there_, but they’re much less
useful than they have been in previous episodes.) In particular, the
test module here is excluded because of the use of the #[cfg(test)]
attribute marker on it.

Because we are using the feature-gated benchmarking functionality, the
show notes “library” can now only be compiled with the Rust nightly (as
of 1.5, the version current as this episode is produced).

One thing that isn’t necessarily obvious from reading the test
documentation in the Rust book and Rust reference: the extern crate test
statement needs to be not in this module, but at the module (lib.rs)
which defines the library/crate; in this case, show_notes/lib.rs.


Sponsors

-   Chris Palmer
-   Derek Morr
-   Luca Schmid
-   Micael Bergeron
-   Ralph Giles (“rillian”)
-   reddraggone9
-   William Roe

Become a sponsor

-   Patreon.com/newrustacean
-   Venmo.com/chriskrycho
-   Dwolla.com/hub/chriskrycho
-   Cash.me/$chriskrycho


Follow

-   New Rustacean:
    -   Twitter: @newrustacean
    -   App.net: @newrustacean
    -   Email: hello@newrustacean.com
-   Chris Krycho
    -   Twitter: @chriskrycho
    -   App.net: @chriskrycho]]></itunes:summary>
            <itunes:duration>18:46</itunes:duration>
        </item>
        <item>
            <title>Bonus 2: Legacy Code</title>
            <link>http://newrustacean.com/show_notes/bonus/_2/</link>
            <description><![CDATA[<p>Legacy Code</p>
<p>Software developers spend a large part of our careers dealing with legacy code. But what is the <em>best</em> way to deal with legacy code? When should you rip out the old and rewrite it, and when should you opt for smaller clean-up jobs because, however ugly, what is already present <em>works</em>?</p>
<h1 id="sponsors">Sponsors</h1>
<ul>
<li>Chris Palmer</li>
<li><a href="https://twitter.com/derekmorr">Derek Morr</a></li>
<li>Luca Schmid</li>
<li>Micael Bergeron</li>
<li>Ralph Giles (“rillian”)</li>
<li>reddraggone9</li>
<li><a href="http://willroe.me">William Roe</a></li>
</ul>
<h2 id="become-a-sponsor">Become a sponsor</h2>
<ul>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li><a href="https://venmo.com/chriskrycho">Venmo</a></li>
<li><a href="https://www.dwolla.com/hub/chriskrycho">Dwolla</a></li>
<li><a href="https://cash.me/$chriskrycho">Cash.me</a></li>
</ul>
<h1 id="follow">Follow</h1>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>App.net: <a href="https://alpha.app.net/newrustacean">@newrustacean</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul></li>
<li>Chris Krycho
<ul>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
<li>App.net: <a href="https://alpha.app.net/chriskrycho">@chriskrycho</a></li>
</ul></li>
</ul>]]></description>
            <pubDate>Sun, 06 Dec 2015 13:23:54 -0500</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/bonus_2.m4a" length="6099582" type="audio/x-m4a"/>
            <guid isPermaLink="false">7FB6C998-E813-4E17-8EFB-CD29135DCD2D</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:subtitle>Paying off technical debt, refactoring, and cleaning up old code.</itunes:subtitle>
            <itunes:summary><![CDATA[Software developers spend a large part of our careers dealing with
legacy code. But what is the _best_ way to deal with legacy code? When
should you rip out the old and rewrite it, and when should you opt for
smaller clean-up jobs because, however ugly, what is already present
_works_?


SPONSORS

-   Chris Palmer
-   Derek Morr
-   Luca Schmid
-   Micael Bergeron
-   Ralph Giles (“rillian”)
-   reddraggone9
-   William Roe

Become a sponsor

-   Patreon.com/newrustacean
-   Venmo.com/chriskrycho
-   Dwolla.com/hub/chriskrycho
-   Cash.me/$chriskrycho


FOLLOW

-   New Rustacean:
    -   Twitter: @newrustacean
    -   App.net: @newrustacean
    -   Email: hello@newrustacean.com
-   Chris Krycho
    -   Twitter: @chriskrycho
    -   App.net: @chriskrycho]]></itunes:summary>
            <itunes:duration>9:41</itunes:duration>
        </item>
        <item>
            <title>Bonus 1: Polyglot Programming Promises and Perils</title>
            <link>http://newrustacean.com/show_notes/bonus/_1/</link>
            <description><![CDATA[<p>Polyglot Programming Promises and Perils</p>
<p>Sometimes, you’re doing a technical interview, and you just cannot figure out why your JavaScript function isn’t behaving like it should… and then, prompted by the interviewer, you realize that you’re not returning anything. Polyglot programming is beautiful, and wonderful, and sometimes it bites you when you aren’t looking.</p>
<h1 id="links">Links</h1>
<ul>
<li><a href="http://www.scala-lang.org">Scala</a></li>
<li><a href="http://fsharp.org">F♯</a></li>
<li><a href="http://elixir-lang.org">Elixir</a></li>
</ul>
<h1 id="sponsors">Sponsors</h1>
<ul>
<li>reddraggone9</li>
<li><a href="http://podcastinit.com">Chris Patti</a></li>
</ul>
<h2 id="become-a-sponsor">Become a sponsor</h2>
<ul>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li><a href="https://venmo.com/chriskrycho">Venmo</a></li>
<li><a href="https://www.dwolla.com/hub/chriskrycho">Dwolla</a></li>
<li><a href="https://cash.me/$chriskrycho">Cash.me</a></li>
</ul>
<h1 id="follow">Follow</h1>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>App.net: <a href="https://alpha.app.net/newrustacean">@newrustacean</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul></li>
<li>Chris Krycho
<ul>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
<li>App.net: <a href="https://alpha.app.net/chriskrycho">@chriskrycho</a></li>
</ul></li>
</ul>
]]></description>
            <pubDate>Wed, 25 Nov 2015 11:27:09 -0500</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/bonus_1.m4a" length="5353416" type="audio/x-m4a"/>
            <guid isPermaLink="false">78C8C06F-DEB6-4821-9995-E550FBA87059</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:subtitle>The delights and challenges of knowing (or even just learning) lots of languages.</itunes:subtitle>
            <itunes:duration>8:28</itunes:duration>
        </item>
        <item>
            <title>e006: Modularize this!</title>
            <link>http://newrustacean.com/show_notes/e006/</link>
            <description><![CDATA[<h1 id="notes">Notes</h1>
<p>Today, we are talking about modules, packages, and APIs in Rust. Taking a bit of a breather after some pretty hard material the last few weeks.</p>
<p>For reference, the <a href="http://doc.rust-lang.org/book/">Rust book</a> section on <a href="http://doc.rust-lang.org/book/crates-and-modules.html">Crates and Modules</a> will be very helpful.</p>
<h2 id="corrigenda">Corrigenda</h2>
<p>I accidentally called this episode 5, instead of episode 6. <em>Whoops.</em></p>
<p>Just before the 15:00 mark, while discussing libraries, I referred to “e006.md” when I meant to say “e006.rs”. Slips of the tongue inspired by the fact that Rust (delightfully) uses Markdown for its documentation.</p>
<h1 id="links">Links</h1>
<ul>
<li><a href="http://jaredonline.svbtle.com/roguelike-tutorial-table-of-contents">Roguelike in Rust</a></li>
<li><a href="https://engineering.intercom.io/yehuda-on-rust-with-ruby/">Yehuda Katz on Ruby FFI</a></li>
</ul>
<h1 id="sponsors" class="section-header">Sponsors</h1>
<ul>
<li>reddraggone9</li>
<li><a href="http://podcastinit.com">Chris Patti</a></li>
</ul>

<h2 id="become-a-sponsor" class="section-header">Become a sponsor</h2>
<ul>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li><a href="https://venmo.com/chriskrycho">Venmo</a></li>
<li><a href="https://www.dwolla.com/hub/chriskrycho">Dwolla</a></li>
<li><a href="https://cash.me/$chriskrycho">Cash.me</a></li>
</ul>

<h1 id="follow" class="section-header">Follow</h1>
<ul>
<li>New Rustacean:

<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>App.net: <a href="https://alpha.app.net/newrustacean">@newrustacean</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul></li>
<li>Chris Krycho

<ul>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
<li>App.net: <a href="https://alpha.app.net/chriskrycho">@chriskrycho</a></li>
</ul></li>
</ul>]]></description>
            <pubDate>Mon, 16 Nov 2015 10:36:26 -0500</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e006.m4a" length="8926372" type="audio/x-m4a"/>
            <guid isPermaLink="false">6707AF5D-82F4-40D5-9DB5-7003D571EEB6</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:subtitle>Designing APIs, and using packages ("crates") and modules</itunes:subtitle>
            <itunes:summary><![CDATA[Designing APIs, and using packages (“crates”) and modules

Notes
Today, we are talking about modules, packages, and APIs in Rust. Taking a bit of a breather after some pretty hard material the last few weeks.

For reference, the Rust book section on Crates and Modules will be very helpful.

Corrigenda
I accidentally called this episode 5, instead of episode 6. *Whoops.*

Just before the 15:00 mark, while discussing libraries, I referred to “e006.md” when I meant to say “e006.rs”. Slips of the tongue inspired by the fact that Rust (delightfully) uses Markdown for its documentation.

Sponsors
- reddraggone9
- Chris Patti (Podcast.__init__)

Become a sponsor
- https://www.patreon.com/newrustacean
- https://venmo.com/chriskrycho
- dwolla.com/hub/chriskrycho
- ttps://cash.me/$chriskrycho]]></itunes:summary>
            <itunes:duration>18:22</itunes:duration>
        </item>
        <item>
            <title>e005: Allocate it where?</title>
            <link>http://newrustacean.com/show_notes/e005/</link>
            <description><![CDATA[<p>Allocate it where?</p>
<ul>
<li><strong>Date:</strong> November 8, 2015</li>
<li><strong>Subject:</strong> Returning functions from other functions, and thinking about the stack, the heap, and reference types.</li>
<li><strong>Audio:</strong>
<ul>
<li><a href="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e005.m4a">M4A</a></li>
<li><a href="http://www.podtrac.com/pts/redirect.mp3/cdn.newrustacean.com/e005.mp3">MP3</a></li>
<li><a href="http://www.podtrac.com/pts/redirect.ogg/cdn.newrustacean.com/e005.ogg">Ogg</a></li>
</ul></li>
</ul>
<h1 id="notes">Notes</h1>
<p>This episode, we look at returning functions from other functions, and as part of that discuss some basics about the stack and the heap—and why we need to care about them for returning functions.</p>
<p>The functions themselves are not especially interesting; they just show you the basic form you use to return functions from other functions, and how to then use them in another function. You’ll want to take a detailed look instead at the documentation for each (or just read the <a href="/src/show_notes/e005.rs.html">source</a>!), because that’s where the meat of the discussion in this week’s code is.</p>
<h1 id="links">Links</h1>
<ul>
<li><a href="http://blog.rust-lang.org/2015/10/29/Rust-1.4.html">Rust 1.4 release announcement</a></li>
<li><a href="https://github.com/rust-lang/rfcs/blob/master/text/1214-projections-lifetimes-and-wf.md">“Clarify (and improve) rules for projections and well-formedness”</a></li>
<li><a href="https://github.com/rust-lang/rfcs/issues/1061">MSVC support tracking issue</a></li>
<li><a href="https://github.com/brson/rust/blob/relnotes/RELEASES.md">Rust 1.4 full release notes</a></li>
<li><a href="http://stackoverflow.com/questions/79923/what-and-where-are-the-stack-and-heap">“What and where are the stack and the heap?”</a></li>
</ul>
<h1 id="sponsors">Sponsors</h1>
<ul>
<li>reddraggone9</li>
<li><a href="http://podcastinit.com">Chris Patti</a></li>
</ul>
<h2 id="become-a-sponsor">Become a sponsor</h2>
<ul>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li><a href="https://venmo.com/chriskrycho">Venmo</a></li>
<li><a href="https://www.dwolla.com/hub/chriskrycho">Dwolla</a></li>
<li><a href="https://cash.me/$chriskrycho">Cash.me</a></li>
</ul>
<h1 id="follow">Follow</h1>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>App.net: <a href="https://alpha.app.net/newrustacean">@newrustacean</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul></li>
<li>Chris Krycho
<ul>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
<li>App.net: <a href="https://alpha.app.net/chriskrycho">@chriskrycho</a></li>
</ul></li>
</ul>]]></description>
            <pubDate>Sun, 08 Nov 2015 15:15:53 -0500</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e005.m4a" length="7466332" type="audio/x-m4a"/>
            <guid isPermaLink="false">2BA666AD-2288-4599-AC61-7B545FD2C539</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:subtitle>Returning functions from other functions, and thinking about the stack, the heap, and reference types.</itunes:subtitle>
            <itunes:summary><![CDATA[Returning functions from other functions, and thinking about the stack, the heap, and reference types.


NOTES

This episode, we look at returning functions from other functions, and
as part of that discuss some basics about the stack and the heap—and why
we need to care about them for returning functions.

The functions themselves are not especially interesting; they just show
you the basic form you use to return functions from other functions, and
how to then use them in another function. You’ll want to take a detailed
look instead at the documentation for each (or just read the source!),
because that’s where the meat of the discussion in this week’s code is.


SPONSORS

-   reddraggone9
-   Chris Patti

Become a sponsor

-   Patreon.com/newrustacean
-   Venmo.com/chriskrycho
-   Dwolla.com/hub/chriskrycho
-   Cash.me


FOLLOW

-   New Rustacean:
    -   Twitter: @newrustacean
    -   App.net: @newrustacean
    -   Email: hello@newrustacean.com
-   Chris Krycho
    -   Twitter: @chriskrycho
    -   App.net: @chriskrycho
]]></itunes:summary>
            <itunes:duration>18:30</itunes:duration>
        </item>
        <item>
            <title>e004: Functionalized</title>
            <link>http://newrustacean.com/show_notes/e004/</link>
            <description><![CDATA[<li><strong>Date:</strong> October 29, 2015</li>
<li><strong>Subject:</strong> Functions, methods, closures, and function as arguments!</li>
<li><strong>Audio:</strong>
<ul>
<li><a href="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e004.m4a">M4A</a></li>
<li><a href="http://www.podtrac.com/pts/redirect.mp3/cdn.newrustacean.com/e004.mp3">MP3</a></li>
<li><a href="http://www.podtrac.com/pts/redirect.ogg/cdn.newrustacean.com/e004.ogg">Ogg</a></li>
</ul></li>
</ul>
<h1 id="notes">Notes</h1>
<p>This week’s episode covers the basics of all sorts of functions: normal functions, methods, and closures.</p>
<h2 id="closures">Closures</h2>
<ul>
<li><a href="http://martinfowler.com/bliki/Lambda.html">An explanation (in Ruby) by Martin Fowler</a></li>
<li><a href="https://doc.rust-lang.org/book/closures.html">Rust book</a></li>
<li><a href="http://rustbyexample.com/fn/closures.html">Rust by Example</a></li>
<li><a href="http://programmers.stackexchange.com/questions/40454/what-is-a-closure">“What is a closure?” (Progammers Stack Exchange)</a> – the first answer is the best, but the second answer may be a helpful stepping stone for people just getting their heads around this and coming from OOP languages like C++ or Java (even though I disagree with the explanation in some ways).</li>
<li><a href="http://stackoverflow.com/questions/36636/what-is-a-closure">“What is a closure?” (Stack Overflow)</a> – careful, thorough answer using JavaScript as an example.</li>
</ul>
<h1 id="links">Links</h1>
<ul>
<li><a href="http://exercism.io/languages/rust">Exercism</a> (hat tip: <a href="https://github.com/Lechindianer">Lechindanier on GitHub</a>)</li>
<li><a href="https://github.com/ctjhoa/rust-learning">Rust Learning</a></li>
<li><a href="http://www.chriskrycho.com/2015/rust-and-swift-viii.html">Rust and Swift (viii)</a></li>
</ul>
<h1 id="followsupport">Follow/Support</h1>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>App.net: <a href="https://alpha.app.net/newrustacean">@newrustacean</a></li>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li><a href="https://www.dwolla.com/hub/chriskrycho">Dwolla</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul></li>
<li>Chris Krycho
<ul>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
<li>App.net: <a href="https://alpha.app.net/chriskrycho">@chriskrycho</a></li>
</ul></li>
</ul>
]]></description>
            <pubDate>Thu, 29 Oct 2015 22:45:12 -0400</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e004.m4a" length="7007649" type="audio/x-m4a"/>
            <guid isPermaLink="false">BC4D9C42-0F4C-4497-9059-436A8906657E</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:subtitle>Functions, methods, closures, and function as arguments!</itunes:subtitle>
            <itunes:summary><![CDATA[Functions, methods, closures, and function as arguments!

NOTES

This week’s episode covers the basics of all sorts of functions: normal
functions, methods, and closures.

Closures

-   An explanation (in Ruby) by Martin Fowler
-   Rust book
-   Rust by Example
-   “What is a closure?” (Progammers Stack Exchange) ‚Äì the first answer
    is the best, but the second answer may be a helpful stepping stone
    for people just getting their heads around this and coming from OOP
    languages like C++ or Java (even though I disagree with the
    explanation in some ways).
-   “What is a closure?” (Stack Overflow) – careful, thorough answer
    using JavaScript as an example.

LINKS

-   Exercism (hat tip: Lechindanier on GitHub)
-   Rust Learning
-   Rust and Swift (viii)

FOLLOW/SUPPORT

-   New Rustacean:
    -   Twitter: @newrustacean
    -   App.net: @newrustacean
    -   Patreon.com/chriskrycho
    -   Dwolla.com/hub/chriskrycho
    -   Email: hello@newrustacean.com
-   Chris Krycho
    -   Twitter: @chriskrycho
    -   App.net: @chriskrycho
]]></itunes:summary>
            <itunes:duration>17:07</itunes:duration>
        </item>
        <item>
            <title>e003: No. more. nulls.</title>
            <link>http://newrustacean.com/show_notes/e003/</link>
            <description><![CDATA[<p>No More Nulls</p>
<ul>
<li><strong>Date:</strong> October 21, 2015</li>
<li><strong>Subject:</strong> Enumerated (<code>enum</code>) types, pattern matching, and meaningful return types.</li>
<li><strong>Audio:</strong>
<ul>
<li><a href="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e003.m4a">M4A</a></li>
<li><a href="http://www.podtrac.com/pts/redirect.mp3/cdn.newrustacean.com/e003.mp3">MP3</a></li>
<li><a href="http://www.podtrac.com/pts/redirect.ogg/cdn.newrustacean.com/e003.ogg">Ogg</a></li>
</ul></li>
</ul>
<h1 id="notes">Notes</h1>
<p>Today’s episode discusses, in order:</p>
<ul>
<li>Enumerated types, with an eye to the difference between structs and enums, and to the differences between <code>enum</code>s in C and in Rust.</li>
<li>Pattern matching, with a focus on using them with enumerated types and some discussion about how they differ from <code>switch</code> blocks in C-like languages.</li>
<li>Using the <code>Option</code> and <code>Result</code> enumerated types with pattern matching to provide meaningful returns from functions safely.</li>
</ul>
<h2 id="order">Order</h2>
<p>There is a specific order to the examples below, and it is <em>not</em> the automatically-alphabetized order rendered by <code>rustdoc</code>. Instead, you should work through in the sequence they appear in the <a href="/src/show_notes/e003/e003.rs.html">source</a>:</p>
<ol type="1">
<li><a href="/show_notes/e003/enum.RelatedishThings.html">RelatedishThings</a></li>
<li><a href="/show_notes/e003/fn.demonstrate_basic_enumeration.html">demonstrate_basic_enumeration</a></li>
<li><a href="/show_notes/e003/fn.demonstrate_match.html">demonstrate_match</a></li>
<li><a href="/show_notes/e003/fn.get_an_option.html">get_an_option</a></li>
<li><a href="/show_notes/e003/fn.demonstrate_option.html">demonstrate_option</a></li>
<li><a href="/show_notes/e003/fn.get_a_result.html">get_a_result</a></li>
<li><a href="/show_notes/e003/fn.demonstrate_result.html">demonstrate_result</a></li>
</ol>
<h2 id="links">Links</h2>
<ul>
<li>New Rustacean <a href="https://github.com/chriskrycho/newrustacean.com/pull/1">Pull Request #1</a></li>
<li>Work on IDE support!
<ul>
<li><a href="https://www.rust-lang.org/ides.html">Landing page</a></li>
<li>My chosen tool: <a href="https://github.com/alexeykudinkin/intellij-rust">JetBrains/IntelliJ</a></li>
</ul></li>
<li><a href="https://github.com/carols10cents/rustlings">Rustlings</a></li>
<li><a href="http://jakegoulding.com/rust-ffi-omnibus/basics/">Rust FFI Omnibus</a></li>
</ul>
<h1 id="followsupport">Follow/Support</h1>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>App.net: <a href="https://alpha.app.net/newrustacean">@newrustacean</a></li>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li>Email: <script type="text/javascript">
<!--
h='&#110;&#x65;&#x77;&#114;&#x75;&#x73;&#116;&#x61;&#x63;&#x65;&#x61;&#110;&#46;&#x63;&#x6f;&#x6d;';a='&#64;';n='&#104;&#x65;&#108;&#108;&#x6f;';e=n+a+h;
document.write('<a h'+'ref'+'="ma'+'ilto'+':'+e+'" clas'+'s="em' + 'ail">'+e+'<\/'+'a'+'>');
// -->
</script><noscript>&#104;&#x65;&#108;&#108;&#x6f;&#32;&#x61;&#116;&#32;&#110;&#x65;&#x77;&#114;&#x75;&#x73;&#116;&#x61;&#x63;&#x65;&#x61;&#110;&#32;&#100;&#x6f;&#116;&#32;&#x63;&#x6f;&#x6d;</noscript></li>
</ul></li>
<li>Chris Krycho
<ul>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
<li>App.net: <a href="https://alpha.app.net/chriskrycho">@chriskrycho</a></li>
</ul></li>
</ul>]]></description>
            <pubDate>Wed, 21 Oct 2015 13:10:12 -0400</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e003.m4a" length="8178565" type="audio/x-m4a"/>
            <guid isPermaLink="false">E39A4582-8095-4645-8925-AB2887828F93</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:subtitle>Enumerated (`enum`) types, pattern matching, and meaningful return values.</itunes:subtitle>
            <itunes:summary><![CDATA[No More Nulls

-   Date: October 21, 2015
-   Subject: Enumerated (`enum`) types, pattern matching, and meaningful return values.

# Notes

Today’s episode discusses, in order:

-   Enumerated types, with an eye to the difference between structs and
    enums, and to the differences between enums in C and in Rust.
-   Pattern matching, with a focus on using them with enumerated types
    and some discussion about how they differ from switch blocks in
    C-like languages.
-   Using the Option and Result enumerated types with pattern matching
    to provide meaningful returns from functions safely.


## Order

There is a specific order to the examples below, and it is _not_ the
automatically-alphabetized order rendered by rustdoc. Instead, you
should work through in the sequence they appear in the source:

1.  RelatedishThings
2.  demonstrate_basic_enumeration
3.  demonstrate_match
4.  get_an_option
5.  demonstrate_option
6.  get_a_result
7.  demonstrate_result]]></itunes:summary>
            <itunes:duration>16:51</itunes:duration>
        </item>
        <item>
            <title>e002: Something borrowed, something… moved?</title>
            <link>http://newrustacean.com/show_notes/e002/</link>
            <description><![CDATA[<p>Something borrowed, something… moved?</p>
<ul>
<li><strong>Date:</strong> October 12, 2015</li>
<li><strong>Subject:</strong> The <code>struct</code> data type constructor, and the basics of Rust’s “ownership” concept and “borrowing” and “moving”.</li>
<li><strong>Audio:</strong>
<ul>
<li><a href="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e002.m4a">M4A</a></li>
<li><a href="http://www.podtrac.com/pts/redirect.mp3/cdn.newrustacean.com/e002.mp3">MP3</a></li>
<li><a href="http://www.podtrac.com/pts/redirect.ogg/cdn.newrustacean.com/e002.ogg">Ogg</a></li>
</ul></li>
</ul>
<h1 id="followsupport">Follow/Support</h1>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>App.net: <a href="https://alpha.app.net/newrustacean">@newrustacean</a></li>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul></li>
<li>Chris Krycho
<ul>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
<li>App.net: <a href="https://alpha.app.net/chriskrycho">@chriskrycho</a></li>
</ul></li>
</ul>
<h1 id="notes">Notes</h1>
<p>Today’s episode discusses, and the associated source code demonstrates, a few basic behaviors of structs… including borrowing!</p>
<p>After taking a short look at one of Rust’s basic approaches to creating new types, we dive into a <em>fairly</em> thorough overview of how borrowing works in fairly run-of-the-mill Rust code. This is a basic introduction, and as such I’m not getting into things like heap-allocated memory (<code>Box</code>) or dealing with <code>move</code> semantics with threads or closures. (I haven’t actually figured those out well enough yet to write something like this for them!)</p>
<p>As usual, you’ll want to have the <a href="/src/show_notes/e002.rs.html"><code>src</code></a> open to see what I’m doing with the components documented below.</p>
<h1 id="links">Links</h1>
<ul>
<li><code>rustfmt</code> – a tool for formatting Rust code
<ul>
<li><a href="https://github.com/nrc/rustfmt">repo</a></li>
<li><a href="http://www.ncameron.org/blog/rustfmt-ing-rust/">“rustfmt-ing Rust`</a></li>
<li><a href="https://www.reddit.com/r/rust/comments/3nt2vm/rustfmting_rust_please_help_me_rustfmt_the_rust/">Reddit discussion</a></li>
</ul></li>
<li>RFC for incremental compilation
<ul>
<li><a href="https://github.com/nikomatsakis/rfcs/blob/incremental-compilation/text/0000-incremental-compilation.md">Text of the RFC</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/1298">GitHub pull request</a></li>
</ul></li>
</ul>
]]></description>
            <pubDate>Sun, 11 Oct 2015 22:24:16 -0400</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e002.m4a" length="8322086" type="audio/x-m4a"/>
            <guid isPermaLink="false">03DD0BB6-9615-420A-A43B-B6EB0BBCD1C4</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:subtitle>Borrow a `struct` for a while. Then give it back, or keep it for yourself!</itunes:subtitle>
            <itunes:summary><![CDATA[Something borrowed, something… moved?

* Date: October 12, 2015

* Subject: The struct data type constructor, and the basics of Rust’s “ownership” concept and “borrowing” and “moving”.

* Audio:

* M4A

* MP3

* Ogg

Follow/Support

* New Rustacean:

* Twitter: @newrustacean

* App.net: @newrustacean

* Patreon

* Email: hello@newrustacean.com

* Chris Krycho

* Twitter: @chriskrycho

* App.net: @chriskrycho

Notes
Today’s episode discusses, and the associated source code demonstrates, a few basic behaviors of structs… including borrowing!

After taking a short look at one of Rust’s basic approaches to creating new types, we dive into a fairly thorough overview of how borrowing works in fairly run-of-the-mill Rust code. This is a basic introduction, and as such I’m not getting into things like heap-allocated memory (Box) or dealing with move semantics with threads or closures. (I haven’t actually figured those out well enough yet to write something like this for them!)

As usual, you’ll want to have the src open to see what I’m doing with the components documented below.
Links

* rustfmt – a tool for formatting Rust code

* repo

* “rustfmt-ing Rust`

* Reddit discussion

* RFC for incremental compilation

* Text of the RFC

* GitHub pull request]]></itunes:summary>
            <itunes:duration>17:12</itunes:duration>
        </item>
        <item>
            <title>e001: Document All the Things</title>
            <link>http://newrustacean.com/show_notes/e001/</link>
            <description><![CDATA[<h1 id="document-all-the-things">Document all the things!</h1>
<ul>
<li><strong>Date:</strong> October 3, 2015</li>
<li><strong>Subject:</strong> Documentation in general, and <code>rustdoc</code> and <code>cargo doc</code> in particular.</li>
<li><strong>Audio:</strong>
<ul>
<li><a href="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e001.m4a">M4A</a></li>
<li><a href="http://www.podtrac.com/pts/redirect.mp3/cdn.newrustacean.com/e001.mp3">MP3</a></li>
<li><a href="http://www.podtrac.com/pts/redirect.ogg/cdn.newrustacean.com/e001.ogg">Ogg</a></li>
</ul></li>
</ul>
<h1 id="followsupport">Follow/Support</h1>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>App.net: <a href="https://alpha.app.net/newrustacean">@newrustacean</a></li>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul></li>
<li>Chris Krycho
<ul>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
<li>App.net: <a href="https://alpha.app.net/chriskrycho">@chriskrycho</a></li>
</ul></li>
</ul>
<h1 id="notes">Notes</h1>
<p>This is a mostly-empty module, and it is intended as such. Why? Well, because <em>almost</em> all the sample code exists in these comments, which serve as the show notes. If you listen to the episode or take a look at the <a href="/src/show_notes/e001.rs.html">source files</a>, you’ll see how it works!</p>
<p>The components below are included <em>solely</em> so you can see how the docstrings work with each kind of thing. Make sure to click on the names of the items: there is more documentation there. Again, take a look at the <a href="/src/show_notes/e001.rs.html">source</a> to see how it looks in the context of a file module.</p>
<p>Note that this module-level docstring uses <code>rather than `///`-style comments. This is because this docstring is documenting the item which contains it, rather than the following item. Per [Rust RFC 505][1], the preferred approach is always to use the &quot;following&quot; form (`///`) rather than the &quot;containing&quot; form (</code>), except for module-level docs like these. (I will be following RFC 505 throughout.)</p>
<h1 id="links">Links</h1>
<ul>
<li><a href="https://github.com/rust-lang/rfcs/issues/1061">Rust and MSVC tracking issue</a></li>
<li>Other documentation tools:
<ul>
<li>Predecessors:
<ul>
<li><a href="http://sphinx-doc.org">Python’s Sphinx tool</a></li>
<li><a href="http://www.stack.nl/~dimitri/doxygen/">Doxygen</a></li>
<li><a href="http://usejsdoc.org">JSDoc</a></li>
<li><a href="http://www.oracle.com/technetwork/articles/java/index-jsp-135444.html">JavaDoc</a></li>
</ul></li>
<li>Other new languages with Markdown tooling
<ul>
<li><a href="http://julialang.org">Julia</a> has a <a href="http://julia.readthedocs.org/en/latest/manual/documentation/">built-in documentation system</a></li>
<li><a href="http://elixir-lang.org">Elixir</a> has <a href="https://github.com/elixir-lang/ex_doc">ex_doc</a></li>
</ul></li>
</ul></li>
<li><a href="http://blog.rust-lang.org/2015/09/17/Rust-1.3.html">Rust 1.3 release announcement</a></li>
<li>Rust’s package hosting: <a href="https://crates.io">crates.io</a>
<ul>
<li><a href="https://github.com/brson/taskcluster-crater">Crater</a> for testing for backwards compatibility</li>
</ul></li>
<li><a href="http://semver.org">Semantic versioning</a>
<ul>
<li><a href="http://blog.rust-lang.org/2014/10/30/Stability.html">“Stability as a Deliverable”</a>: Rust official blog post on version stability, backwards compatibility, and release channels.</li>
</ul></li>
<li><a href="https://doc.rust-lang.org/book/documentation.html">The Rust book chapter on <code>rustdoc</code></a></li>
</ul>]]></description>
            <pubDate>Sat, 03 Oct 2015 16:04:28 -0400</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e001.m4a" length="8417950" type="audio/x-m4a"/>
            <guid isPermaLink="false">9846F954-2459-4E89-BAF6-0DB4DA62E6D3</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:subtitle>Documentation in general, and rustdoc and cargo doc in particular.</itunes:subtitle>
            <itunes:summary><![CDATA[Documentation in general, and rustdoc and cargo doc in particular.

Document all the things!

* Date: October 3, 2015

* Subject: Documentation in general, and rustic and cargo doc in particular.

* Audio:

* M4A

* MP3

Follow/Support

* New Rustacean:

* Twitter: @newrustacean

* App.net: @newrustacean

* Patreon

* Email: hello@newrustacean.com

* Chris Krycho

* Twitter: @chriskrycho

* App.net: @chriskrycho

Notes
This is a mostly-empty module, and it is intended as such. Why? Well, because almost all the sample code exists in these comments, which serve as the show notes. If you listen to the episode or take a look at the source files, you’ll see how it works!

The components below are included solely so you can see how the docstrings work with each kind of thing. Make sure to click on the names of the items: there is more documentation there. Again, take a look at the source to see how it looks in the context of a file module.

Note that this module-level docstring uses rather than `///`-style comments. This is because this docstring is documenting the item which contains it, rather than the following item. Per [Rust RFC 505][1], the preferred approach is always to use the &quot;following&quot; form (`///`) rather than the &quot;containing&quot; form (), except for module-level docs like these. (I will be following RFC 505 throughout.)
Links

* Rust and MSVC tracking issue

* Other documentation tools:

* Predecessors:

* Python’s Sphinx tool

* Oxygen

* JSDoc

* JavaDoc

* Other new languages with Markdown tooling

* Julia has a built-in documentation system

* Elixir has ex_doc

* Rust 1.3 release announcement

* Rust’s package hosting: crates.io

* Crater for testing for backwards compatibility

* Semantic versioning

* “Stability as a Deliverable”: Rust official blog post on version stability, backwards compatibility, and release channels.

* The Rust book chapter on rustc]]></itunes:summary>
            <itunes:duration>17:06</itunes:duration>
        </item>
        <item>
            <title>e000: Hello, world!</title>
            <link>http://newrustacean.com/show_notes/e000/</link>
            <description><![CDATA[<h1 id="hello-world">Hello, World!</h1>
<ul>
<li>Date: September 24, 2015</li>
<li>Subject: The host, the language, and the show!</li>
<li>Audio:
<ul>
<li><a href="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e000.m4a">M4A</a></li>
<li><a href="http://www.podtrac.com/pts/redirect.mp3/cdn.newrustacean.com/e000.mp3">MP3</a></li>
<li><a href="http://www.podtrac.com/pts/redirect.ogg/cdn.newrustacean.com/e000.ogg">Ogg</a></li>
</ul></li>
</ul>
<p>Today’s show is pretty meta. You can skip it if you just want to start with something more technical, but I thought listeners might want to know a little about the origins of the show and my own background, so that’s what you get today. Next time, we’ll be tackling the <code>rustdoc</code> command in some detail.</p>
<hr />
<p>This is an almost-empty module: we aren’t doing any fun code samples yet. I included the standard “Hello, world!” example, because how could I not? However, at some point in the future, there will be much more detailed code samples available:</p>
<ul>
<li>in the <a href="https://github.com/chriskrycho/newrustacean.com">GitHub repository</a> for the show</li>
<li>in the show notes attached to each episode</li>
</ul>
<p>Hopefully, the result will be a pretty helpful bunch of side content along with the audio of the podcast itself.</p>]]></description>
            <pubDate>Thu, 24 Sep 2015 19:14:50 -0400</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e000.m4a" length="8458505" type="audio/x-m4a"/>
            <guid isPermaLink="false">CCE404BC-4B4A-4F28-A687-9BCC66C08CEF</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:subtitle>A little about the host, and a little about the format of the show!</itunes:subtitle>
            <itunes:summary><![CDATA[Hello, world!

* Date: September 24, 2015

* Subject: The host, the language, and the show!

* Audio:

* M4A

* MP3

Today’s show is pretty meta. You can skip it if you just want to start with something more technical, but I thought listeners might want to know a little about the origins of the show and my own background, so that’s what you get today. Next time, we’ll be tackling the rustic command in some detail.

This is an almost-empty module: we aren’t doing any fun code samples yet. I included the standard “Hello, world!” example, because how could I not? However, at some point in the future, there will be much more detailed code samples available:

* in the GitHub repository for the show

* in the show notes attached to each episode

Hopefully, the result will be a pretty helpful bunch of side content along with the audio of the podcast itself.]]></itunes:summary>
            <itunes:duration>17:11</itunes:duration>
        </item>
    </channel>
</rss>