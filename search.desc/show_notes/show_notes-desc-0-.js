searchState.loadedDescShard("show_notes", 0, "Show notes\nBonus episodes: shorter, and usually more about community ‚Ä¶\nBrief discussions of important and useful crates around ‚Ä¶\nHello, world!\nDocument all the things!\nSomething borrowed, something‚Ä¶ moved?\nNo. more. nulls.\nFunctionalized\nAllocate it where?\nModularize this!\nTestify\nJust like something else\nComposing a Rustic tune\nMacros rule!\nOnce upon a type\nI‚Äôm not familiar with that expression\nStaying alive\nStringing things along\nNot dumb pointers.\n<code>RefCell</code>s and code smells\nPoint me where I need to go\n<code>Borrow</code>, <code>AsRef</code>, <code>Deref</code>: my head hurts now\nLet‚Äôs <code>Clone</code> a <code>Cow</code>!\nPutting code in its place\nKeeping your types under cover\n<code>Send</code> and <code>Sync</code>\nTraits Deep Dive, Part 1\nTraits Deep Dive, Part 2\nTraits Deep Dive, Part 3\nFunctional Programming Ideas\nTrust Me; I Promise!\nMeet My Associates\nI‚Äôm Out to C\nCan You See Me Now?\nFFI Deep Dive\nInterviews: hearing from people around the Rust community!\nDefine a macro like <code>try!</code> but which works in the context of ‚Ä¶\nMeta episodes: content about the show itself.\nNews: occasional episodes dedicated to changes in Rust and ‚Ä¶\nDefine an ident macro to show how they can capture ‚Ä¶\nPolyglot programming promises and perils\n‚ÄúBecoming a Contributor‚Äù\nI Still Make Silly Mistakes\nHow the Sausage Gets Made\nLegacy code\nBuilding as a community\nWe <em>can</em> have nice things\nBetter than open source contributions\nIt doesn‚Äôt have to be sexy\nKatas‚Äîor: learning by doing\nGiving back (by teaching)\nOpen source is mostly just normal people\nBurnout\nTranslating Between Languages\nBecoming a Contributor\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBonus: I Still Make Silly Mistakes\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBonus: How the Sausage Gets Made\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBonus: Burnout\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBonus: Translating Between Languages\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nquick-xml\nclap\nRust Language Service\nbindgen and cbindgen\nRayon\nRocket\nSerde\nThe wasm tools\nCYSK: <code>bindgen</code> and <code>cbindgen</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCrates You Should Know: Serde\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCrates You Should Know: Serde\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPrints ‚ÄúHello, world!‚Äù if you import it somewhere and ‚Ä¶\nThis is a sample structure, to demonstrate <code>rustdoc</code>/‚Ä¶\nHere is the director‚Äîbut (s)he‚Äôs rather shy and ‚Ä¶\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis documents a fairly ho-hum structure constructor.\nHere is a string telling us what the theme song was.\nThis documents a plain-old function.\nHere is the year the show premiered.\nThis struct is simple but useful to see how borrowing and ‚Ä¶\nDemonstrates general borrowing of an immutable reference.\nDemonstrates general borrowing of a mutable reference.\nReturns the value of <code>Circle.x</code>, taking ownership of the ‚Ä¶\nReturns the value of <code>Circle.x</code>, taking ownership of a ‚Ä¶\nDemonstrates how the same concepts apply when dealing with ‚Ä¶\nDemonstrates how borrowing works with plain old functions.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDemonstrates general moving of an instance.\nCreates a <code>Circle</code> instance centered on specified x, y ‚Ä¶\nCreates a <code>Circle</code> instance centered on the ‚Äúorigin‚Äù (x ‚Ä¶\nRadius of the circle\nX position of the circle‚Äôs origin.\nReturns the value of <code>Circle.x</code>, borrowing a mutable ‚Ä¶\nReturns the value of <code>Circle.x</code>, borrowing an immutable ‚Ä¶\nY position of the circle‚Äôs origin\nIt can be a full-on struct-type construct.\nJust exists to be used as an element in <code>RelatedishThings</code>.\nAn enumeration can <em>hold</em> a variety of types. This one shows ‚Ä¶\nAnd it can use other complex data types within those, of ‚Ä¶\nIt could be a tuple struct, with basically any value type ‚Ä¶\nThis doesn‚Äôt have a value other than being ‚Ä¶\nShows how the result of an enum comes back as increasingly ‚Ä¶\nShows in a bit more detail how <code>match</code> works.\nShows how an option type works in practice.\nShows how a <code>Result</code> type works in practice.\nReturns the argument unchanged.\nReturns the argument unchanged.\nShows how to return either a meaningful result or an error ‚Ä¶\nShows how this is used in a more meaningful context, with ‚Ä¶\nShows how returning a <code>RelatedishThings::ComplexData</code> ‚Ä¶\nShows how returning a <code>RelatedishThings::SomeName</code> instance ‚Ä¶\nShows how returning a <code>RelatedishThings::ReusedStructure</code> ‚Ä¶\nShows how returning a <code>RelatedishThings::Unit</code> instance ‚Ä¶\nShows how returning a <code>RelatedishThings::SomeValue</code> instance ‚Ä¶\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShows how to take a function as an argument.\nShows how closures can act on elements within their ‚Ä¶\nShow how to call a function with a function as an argument.\nShows how to use both struct and instance methods.\nCreate a module so we can see public/private behavior.\nShows how methods work. Elaborates only a little on the ‚Ä¶\nA tuple holding a floating point value and a string slice. ‚Ä¶\nReturns the argument unchanged.\nA getter for data which is not publicly accessible in the ‚Ä¶\nCalls <code>U::from(self)</code>.\nA standard struct instance method.\nA standard constructor pattern.\nUses the <code>doubler_factory</code> to get a function which doubles a ‚Ä¶\nCreates a closure which doubles an integer.\nCreates a function which doubles an integer.\nGive an example of nested modules.\nDemonstrates that modules can be <code>use</code>d within functions.\nThis is an internal module. Note that it isn‚Äôt public.\nThis is an internal module which <em>is</em> public.\nDemonstrates the use of modules and namespaces.\nDemonstrates how aliased namespaces work.\nDemonstrates how glob-imported <code>use</code>s works.\nThis is just a nested module.\nA module function, demonstrating module-public function ‚Ä¶\nAnother module function, demonstrating module-private ‚Ä¶\nA module function, demonstrating module-public function ‚Ä¶\nA public function in a public module.\nA private function in a public modules.\nA trivial function for a trivial test. See the source!\nThis is just a container which can hold any two types.\nThis is <code>Option&lt;T&gt;</code>, but using Haskell‚Äôs names instead.\nA simple type to illustrate trait implementation.\nDemonstrate a function <em>generic</em> over any type.\nDemonstrate a function with a <em>trait bound on a generic</em>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefine a simple trait so we can see how it works.\nDefine a simple struct on which to implement <code>Iterator</code>‚Ä¶ ‚Ä¶\nHave the item print and then return some string.\nDemonstrate using a for loop over an (infinite!) iterator.\nReturns the argument unchanged.\nHave the item return an integer.\nCalls <code>U::from(self)</code>.\nStart with 0.\nA value to double and add one to on every <code>next()</code> call.\nContains the error value\nContains the success value\nTrivial alias for Result for convenience.\nDemonstrate how <code>try!</code> works in practice.\nIs the thing ‚Äúexpressive‚Äù, whatever that means?\nIs the thing statically known?\nIs the thing <em>strong</em>?\nLook, we composed those enums into another type. How‚Ä¶ ‚Ä¶\nAn incredibly contrived function which just shows enums at ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nFunctions are expressions, and so are their contents.\nLike functions, if blocks are expressions.\nCalls <code>U::from(self)</code>.\nMatch blocks are also expressions.\nBlock blocks are also expressions!\nAn individual person defined in a way that includes a ‚Ä¶\nA reference to a number, either integral or ‚Ä¶\nJust in case we‚Äôre talking about a character from Genesis\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe person‚Äôs name, as a string <em>reference</em>.\nGet a(n optional) sub-slice of a slice.\nDemonstrate dereferencing. (You‚Äôll want to read this ‚Ä¶\nPrint a üöÄ, just because we can.\nGet a string <em>slice</em>. Note the required lifetime specifier ‚Ä¶\nGet a <code>String</code> instance. Note there‚Äôs no lifetime.\nGet a <code>String</code> with a specified capacity.\nIt‚Äôs easy enough to get a <code>String</code> from a <code>str</code>.\nA no-content struct to serve as the target to dereference ‚Ä¶\nA no-content struct to serve as the type to dereference ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA trivial (and frankly rather silly) example for use with ‚Ä¶\nDemonstrate the basics of reference-counted types. (Read ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nNote that this takes ownership of the data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNote that this function is not generic because it assumes ‚Ä¶\nNote that this function is <em>generic</em>: it will work for any ‚Ä¶\nA container showing a type where <code>Cell&lt;T&gt;</code> works with <code>Vec&lt;T&gt;</code>.\nA container showing where <code>Cell&lt;T&gt;</code> doesn‚Äôt work and ‚Ä¶\nDemonstrate interior mutability with <code>Rc</code> and <code>RefCell</code>.\nDemonstrate how you need <code>Cell&lt;T&gt;</code> even just with a <code>Vec&lt;T&gt;</code>;\nOperate mutably on the contenets of an immutable reference ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA dummy container for use with references.\nA simple example of using the dereference operator.\nA simple demonstration of matching against a reference ‚Ä¶\nGive a basic example of how the reference operator works.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDemonstrate borrowing the internal contents of the item.\nA struct for showing that you cannot use <code>Borrow</code>, <code>AsRef</code>\nTake the same type by <code>Deref</code> coercion at the call site.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake it implementing <code>Borrow&lt;[u8]&gt;</code>.\nTake it implementing <code>AsRef&lt;[u8]&gt;</code>. Note similarity to ‚Ä¶\nA non-copyable point type\nA struct which implements <code>Clone</code> but not <code>Copy</code>.\nA struct with identical behavior to <code>ANoCopyOrClonePoint</code>, ‚Ä¶\nThe <code>Cow</code> type can wrap around other types and make them ‚Äú‚Ä¶\nWhat if we need a mutable reference to the wrapped type?\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate a point at 0, 0, 0\nGenerate a point at 0, 0, 0\nA type alias for a string that is appropriate to use as an ‚Ä¶\nA ‚Äúnewtype‚Äù built by wrapping a <code>String</code> in a ‚Ä¶\nA ‚Äúnewtype‚Äù built by wrapping a <code>String</code> in a tuple ‚Ä¶\nA simple thing to demonstrate destructuring\nJust a field we can destructure.\nAnd another field we can destructure.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA simple function showing you can use a <code>String</code> where an ‚Ä¶\nA function which takes a string, to use with <code>Deref</code> and ‚Ä¶\nFull script for the episode.\nHow <code>Send</code> and <code>Sync</code> work\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBreakfast is eatable, so <code>Breakfast</code> is <code>Eatable</code>!\nA trait, to be implemented by types like <code>Breakfast</code>.\nMoar Breakfast is even better, so <code>MoarBreakfast</code> is also ‚Ä¶\nJust another way to eat things ‚Äì exists to show ‚Ä¶\ne023: Traits Deep Dive, Part I\nShows how you can use traits with your own and others‚Äô ‚Ä¶\nHow to eat things. (Has a default implementation.)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe stuff to do <em>before</em> you eat things. (No implementation!)\nDemonstrate a generic trait.\nA data structure which will implement <code>std::ops::Add</code>.\ne024: Traits Deep Dive, Part II\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDemonstrate the ability to take a trait constraint on a ‚Ä¶\nDemonstrate the ability to take a trait constraint on a ‚Ä¶\ne025: Traits Deep Dive, Part III\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ne026: Functional Programming Ideas in Rust\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ne027: I Promise; Trust Me\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMeet My Associates\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn example of a slightly more complex data structure we ‚Ä¶\ne029: I‚Äôm Out To C\nA safe interface for the unsafe <code>ffi::add</code>.\nThe module with all the unsafe code in it! You‚Äôll want ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA safe interface for the unsafe <code>ffi::translate</code> function.\nA <em>mostly</em>-trivial example: addition in C instead of in ‚Ä¶\nAn example of a C function we can call with an object.\ne030: Can You See Me Now?\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOne of two internal modules (with <code>right</code>) for demonstrating ‚Ä¶\nOne of two internal modules (with <code>left</code>) for demonstrating ‚Ä¶\n<code>pub(crate) mod a</code> is visible everywhere within the crate ‚Ä¶\n<code>pub(in crate::e030::left) mod b</code> is visible to\nVisible to other items in <code>left</code>, including in sub-modules.\nThis is visible everywhere in the crate that can see <code>a</code>. ‚Ä¶\n<code>mod child</code> here is visible to <code>a</code>, but not outside <code>a</code> ‚Äì ‚Ä¶\n<code>fn sibling</code> is visible only to other items within <code>a</code>.\n<code>pub fn also_only_in_child</code> is also hidden to anything ‚Ä¶\n<code>fn only_in_child</code> is not visible to anything outside <code>child</code>.\nThis is visible everywhere in the crate that can see <code>b</code>. ‚Ä¶\nThis is visible everywhere in the crate that can see <code>b</code>. ‚Ä¶\nThis is visible <em>within</em> the crate everywhere that can see ‚Ä¶\nThis is visible everywhere in <code>right</code>, including in <code>q</code>.\nThis is visible everywhere in the e030 module.\nThis is visible everywhere in the crate that can see <code>q</code>. ‚Ä¶\nThis is visible everywhere in the crate that can see <code>s</code>. ‚Ä¶\nA struct identical to <code>Point</code>, but which is <em>not</em> <code>#[repr(C)]</code>!\nA simple struct which we can expose to a C API. Note that ‚Ä¶\ne031: FFI Deep Dive!\nThe simplest possible example of exposing Rust functions ‚Ä¶\nTake two strings in and concatentate them without mutating ‚Ä¶\nFree any string allocated by Rust.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nSafely drops the <code>OpaquePoint</code> instance.\nExpose an interface for C API callers to call the ‚Ä¶\nExpose an interface for C API callers to call the <code>Point</code> ‚Ä¶\nDemonstrate unions! Combines an <code>enum</code> and a <code>union</code> into a ‚Ä¶\nx position ‚Äì made <code>pub</code> to indicate that we‚Äôre exposing ‚Ä¶\ny position ‚Äì made <code>pub</code> to indicate that we‚Äôre exposing ‚Ä¶\nUses an <code>enum</code> and a <code>union</code> to get close to a regular Rust ‚Ä¶\nA union, to be used as the inner value for <code>Either</code>.\nFor tagging the type in <code>Either</code>. See the body of <code>demo_union</code>.\nA simple type designed to demo unions. See the body of ‚Ä¶\nBuilds an instance of <code>Either</code>, a manually-managed ‚Äútagged ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSean Griffin\nRaph Levien\nCarol (Nichols || Goulding)\nJonathan Turner\nDiesel 1.0, with Sean Griffin\nInteger32: Carol Nichols || Goulding and Jake Goulding\nIncreasing Rust‚Äôs Reach 2017\nMicro-interviews from Rust Belt Rust 2017\nSean Griffin on Rust, ORMs, and Web Frameworks\nSean Griffin on type systems and hopes for Rust‚Äôs future\nRaph Levien on using Rust to build the Xi editor\nRaph Levien on Rust‚Äôs current strengths and places it ‚Ä¶\nPart 1: Getting to Rust\nPart 2: Making Rust Better\nPart 3: Smoothing the Rust dev story\nPart 1: The past and present of Diesel\nPart 2: The future of Diesel\nTranscript ‚Äì¬†coming at some point!\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTranscript ‚Äì¬†coming at some point!\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAnna Liao\nLee Baillie\nMatt Gathu\nTranscript coming soon!\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTranscript coming soon!\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTranscript coming soon!\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAndrew Hobden\nAnthony Deschamps\nArun Kulshreshtha\nBen Beckwith\nBen Striegel\nColin Dean\nEsty Thomas\nHolden Marcsisin\nJess Saxeter\nKatie Nolan\nMatthias Endler\nParry Wilcox\nPete Lyons\nThomas Gideon\nTom Kriezkowski\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAnthony Deschamps\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nArun Kulshreshtha\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBen Striegel\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRead the episode transcript!\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHolden Marcsisin\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nJess Saxeter\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPete Lyons\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSlowing Down\nTwo Milestones\nHappy Coding!\nMeta 3: Happy Coding!\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOne year and counting\nLet‚Äôs talk roadmap!\nIncreasing Rust‚Äôs Reach\nRust 1.20\nRust 1.21 and 1.22\nRust 1.23\nRust 1.24\nRust 1.25\nRust 1.26\nRust 1.27\nRust 1.28\nRust 1.29 and 1.30\nA two-part special on Rust 1.31 and the 2018 Edition!\nRust 1.32\nRust 1.33 and 1.34\nRust 1.35\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNews: Rust 1.21 and 1.22\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNews: Rust 1.23\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRust 1.24\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNews: Rust 1.25\nAn example of the new match style.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRust 1.26\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRust 1.27\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRust 1.28\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRust 1.29 and 1.30\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRust 1.31 and the 2018 Edition, Part I\nRust 1.31 and the 2018 Edition, Part II\nNews: Rust 1.31 ‚Äì¬†The 2018 Edition, Part I\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNews: Rust 1.31 ‚Äì¬†The 2018 Edition, Part II\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNews: Rust 1.32\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNews: Rust 1.33 and 1.34\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNews: Rust 1.35\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")